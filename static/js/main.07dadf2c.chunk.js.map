{"version":3,"sources":["components/TweetCard/TweetContent/TweetMedia.js","actions/index.js","components/TweetCard/TweetContent/AuthorBlank.js","components/TweetCard/TweetContent/TweetText.js","components/TweetCard/TweetContent/QuoteTweet/QuoteTweet.js","components/TweetCard/TweetContent/TweetContent.js","components/TweetCard/TweetCard.js","custom-dict/verbs.js","config/pos.js","components/TweetCard/TweetContent/WordBlank.js","classes/FillBlank.js","components/TweetNav.js","components/App.js","classes/GuessAuthor.js","classes/GameController.js","components/DragWord.js","components/DragAuthor.js","components/TweetCard/TweetInfo.js","components/DragOptions.js","components/Lives.js","reducers/user.js","reducers/game.js","reducers/lightbox.js","reducers/ui.js","index.js","reducers/index.js","local-storage/localStorage.js","sound/success.mp3","sound/print.mp3","sound/bad.mp3","sound/type.mp3","sound/fail.mp3","sound/click.mp3"],"names":["dispatch","updateUser","user","type","updateToken","token","setDataAndInitGame","curGame","parsedFriends","parsedTweets","lastTweetFetched","lastTweetFetchDate","Date","now","AuthorBlank","console","log","useDrop","accept","hover","item","monitor","collect","isOver","canDrop","authorBeingDragged","getItem","drop","backgroundColor","color","width","blankName","blankHandle","author","name","handle","ref","className","style","TweetText","props","game","useSelector","state","textToRender","tweetToRender","classForTweetInfo","curTweet","quote","urlsToRender","quoteTweet","infoContent","header","error","text","urls","i","length","push","target","href","expanded_url","rel","key","display_url","tweetDate","date","toLocaleTimeString","toLocaleDateString","TweetMedia","undefined","curSlide","lightbox","slide","lbVisible","isVisible","useDispatch","tweetWithMedia","content","numMedia","mediaURLs","imgAr","hasMedia","mediaAr","media","url","src","alt","onClick","slideNum","height","controls","format","toggler","sources","QuoteTweet","printSound","Audio","printFile","TweetContent","showOptions","pause","animateToggle","ui","tweetIn","status","animation","animationDur","isQuote","CSSTransition","in","classNames","appear","timeout","onExited","onEntering","play","onEntered","TweetCard","gridOrder","gridSpan","verbs","posMap","JJ","JJR","JJS","NN","NNS","VB","VBD","VBG","VBN","VBP","VBZ","Blank","extractedWord","blankOrder","order","wordBeingDragged","blankFiller","value","wordInBlank","droppedWords","droppedWord","droppedIn","word","badSound","badFile","goodSound","goodFile","successSound","successFile","failSound","failFile","pos","require","tagger","Tagger","Sentencer","configure","actions","verb","Math","floor","random","FillBlank","newTweet","foundWords","this","extractedWords","wordOptions","numBlanks","numDropped","lives","parent","GameController","extractWords","findAndExtractWords","newGame","correctDrop","newWordObj","correct","incorrectDrop","checkMovedWord","wordObj","checkAlreadyDropped","dropID","checkDone","updateGame","fail","toast","position","autoClose","closeButton","pauseOnHover","draggable","transition","Zoom","hideProgressBar","success","animateOut","done","getRandomWords","allWordReg","RegExp","wordAr","match","extractedWordArray","numCheckedWords","numChar","numWordsToExtract","usedIdx","randIdx","getRandomUniqueIndex","checkValidWord","wordLex","Lexer","lex","wordPos","tag","mappedPos","mappedPOS","findWordsInText","foundWordArray","searchExtractedWord","regSearchExtractedWord","startIdx","search","endIdx","start","end","sort","a","b","extractWordObjs","foundWord","searchFoundWord","foundWordRegex","replace","parts","split","jsxAr","curWordIdx","newGuessAuthor","randWord","make","normedWord","normalizeCap","setWordOptions","setExtractedWords","serializedJson","newInstance","modelWord","normWord","character","allCaps","normedChars","charAt","isNaN","toUpperCase","toLowerCase","alert","join","max","newIdx","includes","GuessAuthor","friendOptions","friendList","init","friends","store","getState","fetchAllFriends","correctAuthor","randFriend","he","fetchNewTweets","tweets","tweetID","Promise","resolve","shouldReturn","allTweets","firstTweet","splice","pickRandomNumber","getRandomFriends","updateTweets","newTweets","Object","keys","tweet","updateParsedTweets","setTimeout","updateStore","userDetails","userToken","twitterProvider","userTokenSecret","tokenSecret","fetch","headers","then","res","json","response","errors","parseRawTweets","catch","allUserData","fetchFriends","next_cursor","users","cursor","next_cursor_str","parseRawFriends","err","rawFriends","pic","profile_image_url","screen_name","rawTweets","retweeted_status","in_reply_to_status_id","created_at","id_str","decode","full_text","entities","extended_entities","media_url_https","video_info","variants","content_type","is_quote_status","quoted_status","unshift","clickSound","clickFile","gameController","animateAndNext","TweetNav","message","DragWord","fibGame","strike","opacity","useDrag","dropResult","getDropResult","handleDrop","options","dropEffect","isDragging","drag","textDecoration","DragAuthor","authorGame","time","isOverTarget","dragCoords","getSourceClientOffset","timeSinceTweet","tweetDateString","tweetTime","getTime","difference_ms","seconds","minutes","hours","days","shuffle","array","temporaryValue","randomIndex","currentIndex","DragOptions","map","Lives","strikes","numIcons","onFailedAuth","onSuccessAuth","get","isAuthenticated","logout","localStorage","removeItem","App","gameAdmin","animateOptions","optionsIn","gridStyle","img","id","class","loginUrl","onFailure","onSuccess","requestTokenUrl","showIcon","intialUser","action","intialGame","lastFetched","intialLightbox","initialUI","completeIn","combineReducers","persistedState","serializedState","parsedState","JSON","parse","gameFromJson","fromJSON","loadState","createStore","rootReducer","window","__REDUX_DEVTOOLS_EXTENSION__","trace","subscribe","throttle","stringify","setItem","saveState","render","backend","HTML5Backend","document","getElementById","module","exports"],"mappings":"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dlH,EJoDsB,CAC5BG,KAAM,mBIwBIgH,WAAY,WAnEhBnB,EAAWoB,QAoEPC,UAAW,kBAAMjB,MAEjB,yBAAK/D,UAAU,8BACX,yBAAKA,UAAU,iBACVyC,MCvCNwC,G,OAtDG,WAEhB,IACIxC,EADArC,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,KAAKlC,WAGvCgH,EAAY,GACZC,EAAW,GAEF,OAAT/E,EAIe,OAHFA,EAAKM,WAKA,cAAdN,EAAKtC,KACP2E,EACE,kBAAC,WAAD,KACE,kBAAC,EAAD,OAKiB,gBAAdrC,EAAKtC,KACZ2E,EACE,kBAAC,WAAD,KACE,kBAAC,EAAD,OAIiB,aAAdrC,EAAKtC,MAAqC,aAAdsC,EAAKtC,MACxC2E,EACE,kBAAC,WAAD,KACE,kBAAC,EAAD,OAIJyC,EAAY,SACZC,EAAW,aAGXzG,QAAQsC,MAAM,sCAQlByB,EAAU,KAGZ,OAAQ,yBAAKzC,UAAW,SAAWkF,EAAY,IAAMC,GAAW1C,K,gBC6cnD2C,EAxgBH,CACV,aACA,cACA,aACA,aACA,UACA,UACA,MACA,WACA,QACA,MACA,UACA,SACA,aACA,YACA,SACA,WACA,MACA,OACA,QACA,WACA,QACA,UACA,SACA,aACA,QACA,UACA,WACA,UACA,YACA,UACA,aACA,YACA,WACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,QACA,UACA,SACA,YACA,WACA,QACA,QACA,UACA,QACA,UACA,QACA,SACA,QACA,UACA,SACA,QACA,QACA,YACA,YACA,UACA,UACA,OACA,UACA,YACA,aACA,QACA,QACA,aACA,QACA,SACA,QACA,QACA,WACA,YACA,UACA,WACA,aACA,QACA,OACA,cACA,UACA,UACA,UACA,UACA,WACA,cACA,UACA,UACA,WACA,UACA,UACA,WACA,gBACA,aACA,WACA,WACA,UACA,SACA,UACA,UACA,WACA,WACA,cACA,YACA,UACA,UACA,WACA,aACA,UACA,UACA,SACA,WACA,YACA,aACA,OACA,UACA,YACA,aACA,UACA,SACA,WACA,YACA,YACA,SACA,QACA,SACA,WACA,WACA,SACA,SACA,QACA,SACA,WACA,UACA,cACA,SACA,cACA,SACA,WACA,SACA,SACA,SACA,YACA,UACA,SACA,SACA,WACA,UACA,gBACA,SACA,YACA,WACA,WACA,eACA,UACA,WACA,UACA,UACA,cACA,cACA,aACA,YACA,WACA,QACA,OACA,OACA,OACA,OACA,UACA,SACA,QACA,SACA,YACA,YACA,SACA,SACA,YACA,UACA,WACA,UACA,UACA,YACA,SACA,SACA,SACA,QACA,YACA,YACA,QACA,YACA,WACA,WACA,UACA,WACA,UACA,WACA,UACA,SACA,WACA,aACA,UACA,UACA,UACA,SACA,UACA,cACA,YACA,aACA,cACA,UACA,OACA,SACA,WACA,YACA,MACA,QACA,WACA,YACA,UACA,UACA,SACA,QACA,QACA,OACA,UACA,UACA,SACA,QACA,WACA,SACA,QACA,QACA,QACA,QACA,SACA,OACA,OACA,YACA,OACA,OACA,WACA,aACA,SACA,YACA,SACA,UACA,YACA,cACA,WACA,QACA,gBACA,YACA,SACA,WACA,WACA,UACA,UACA,UACA,YACA,WACA,SACA,YACA,WACA,YACA,YACA,YACA,YACA,YACA,SACA,YACA,cACA,UACA,OACA,QACA,UACA,QACA,SACA,OACA,QACA,UACA,UACA,UACA,YACA,OACA,SACA,WACA,QACA,WACA,SACA,MACA,WACA,SACA,cACA,MACA,SACA,SACA,WACA,UACA,YACA,UACA,SACA,QACA,YACA,WACA,WACA,QACA,WACA,YACA,SACA,UACA,WACA,UACA,WACA,YACA,SACA,QACA,UACA,UACA,SACA,YACA,SACA,UACA,cACA,QACA,WACA,SACA,YACA,YACA,UACA,WACA,UACA,UACA,UACA,cACA,WACA,UACA,UACA,WACA,aACA,QACA,UACA,OACA,WACA,UACA,UACA,UACA,WACA,UACA,UACA,QACA,aACA,QACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YACA,UACA,WACA,UACA,WACA,QACA,QACA,MACA,OACA,OACA,OACA,SACA,SACA,YACA,YACA,YACA,SACA,WACA,UACA,UACA,SACA,QACA,SACA,WACA,WACA,eACA,YACA,SACA,UACA,UACA,UACA,SACA,QACA,aACA,SACA,UACA,SACA,YACA,WACA,UACA,UACA,UACA,UACA,WACA,SACA,WACA,SACA,SACA,SACA,SACA,aACA,QACA,SACA,OACA,OACA,WACA,SACA,SACA,aACA,SACA,SACA,UACA,SACA,QACA,UACA,SACA,QACA,QACA,OACA,WACA,WACA,SACA,OACA,UACA,QACA,OACA,QACA,YACA,aACA,UACA,QACA,QACA,cACA,QACA,YACA,aACA,aACA,aACA,aACA,YACA,QACA,SACA,eACA,aACA,UACA,YACA,YACA,SACA,UACA,UACA,SACA,UACA,YACA,aACA,cACA,WACA,OACA,SACA,SACA,QACA,OACA,YACA,OACA,WACA,OACA,OACA,QACA,QACA,QACA,QACA,aACA,WACA,YACA,YACA,WACA,YACA,YACA,SACA,QACA,SACA,cACA,QACA,UACA,YACA,QACA,SACA,SACA,UACA,SACA,MACA,UACA,WACA,QACA,SACA,OACA,QACA,YACA,WACA,YACA,QACA,QACA,MACA,WACA,UACA,QACA,QACA,MACA,OCvfaC,EAdF,CACTC,GAAI,YACJC,IAAK,YACLC,IAAK,YACLC,GAAI,OACJC,IAAK,QACLC,GAAI,OACJC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,OACLC,IAAK,QCqEMC,EA5ED,SAAA9F,GAEZzB,QAAQC,IAAI,mBAEZ,IAAIuH,EAAgB/F,EAAM+F,cACtBC,EAAahG,EAAMgG,WACnB/F,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,KAAKlC,WANtB,EAQiCU,YAAQ,CAC5DC,OAAQ,OACRuH,MAAOD,EACP7G,KAAM,iBAAO,CAAEO,KAAMqG,EAAeE,MAAOD,IAC3ClH,QAAS,SAAAD,GAAO,MAAK,CACnBE,OAAQF,EAAQE,SAChBC,QAASH,EAAQG,UACjBkH,iBAAkBrH,EAAQK,cAfT,0BAQZF,EARY,EAQZA,QAASD,EARG,EAQHA,OAAQmH,EARL,EAQKA,iBAAoB/G,EARzB,KAmBjBmD,EAAU,KACV6D,EAAc,KACd7G,EAAQ,OAGRF,EAAkB,cAClBC,EAAQD,EAFKJ,GAAWD,GAI1BK,EAAkB,cAClBC,EAAQ,QAER8G,EAAcD,EAAiBE,MAC/B9G,EAAQ,eACCN,IAETK,EADAD,EAAkB,UAElB+G,EAAcD,EAAiBE,MAC/B9G,EAAQ,eAGV,IAAI+G,EAAc,KAElB,GAAa,OAATpG,EAAe,CACjB,IAAIqG,EAAerG,EAAKqG,aADP,uBAEjB,YAAwBA,EAAxB,+CAAsC,CAAC,IAA9BC,EAA6B,QAChCA,EAAYC,YAAcR,IAC5BK,EAAcE,IAJD,mFAgCnB,OArBEjE,EADkB,OAAhB+D,EAEA,0BACEzG,IAAKT,EACLU,UAAU,qBACVC,MAAO,CAAEV,gBAAiB,cAAeC,MAAO,UAE/CgH,EAAYI,MAKf,0BACE7G,IAAKT,EACLU,UAAU,cACVC,MAAO,CAAEV,kBAAiBC,QAAOC,UAEhC6G,GAKA,kBAAC,WAAD,KAAW7D,I,oFChEhBoE,EAAW,IAAIjD,MAAMkD,KACrBC,EAAY,IAAInD,MAAMoD,KACtBC,EAAe,IAAIrD,MAAMsD,KACzBC,EAAY,IAAIvD,MAAMwD,KAEtBC,EAAMC,EAAQ,KACdC,EAAS,IAAIF,EAAIG,OAGjBC,EAAYH,EAAQ,KACxBG,EAAUC,UAAU,CACnBC,QAAS,CACRC,KAAM,WACL,OAAOxC,EAAMyC,KAAKC,MAAMD,KAAKE,UAAY3C,EAAMhE,OAAS,S,ICfvDzD,ECgBAA,EFIiBqK,E,WACpB,WAAYC,EAAUC,GAAa,oBAElCC,KAAKzH,SAAWuH,EAChBE,KAAKrK,KAAO,YAGZqK,KAAKC,eAAiB,GACtBD,KAAKE,YAAc,GACnBF,KAAKG,UAAY,EACjBH,KAAKI,WAAa,EAClBJ,KAAK1B,aAAe,GACpB0B,KAAKK,MAAQ,EACbL,KAAKM,OAAS,IAAIC,GACdR,GACHC,KAAKD,WAAaA,EAClBC,KAAK5H,aAAe4H,KAAKQ,iBAGzBR,KAAKD,WAAa,KAClBC,KAAK5H,aAAe4H,KAAKS,uB,uDAK1B,OAAOT,KAAKK,Q,gCAKZL,KAAKM,OAAOI,Y,iCAIFnC,EAAaC,EAAWmC,GAGlC,IAAIC,EAAa,CAChBnC,KAAMF,EACNC,UAAWA,GAGZ,GAAIA,IAAcmC,EAMjB,OADAC,EAAWC,SAAU,EACdb,KAAKc,gBAMb,GAXCF,EAAWC,SAAU,EAWlBb,KAAKe,eAAexC,GAAc,CACrChI,QAAQC,IAAI,cACZ,IAAK,IAAIwC,EAAI,EAAGA,EAAIgH,KAAK1B,aAAarF,OAAQD,IAAK,CAClD,IAAIgI,EAAUhB,KAAK1B,aAAatF,GAChCzC,QAAQC,IAAIwK,GACRA,EAAQvC,OAASmC,EAAWnC,OAC/BlI,QAAQC,IAAIwK,GACZhB,KAAK1B,aAAatF,GAAK4H,SAMrB,GAAIZ,KAAKiB,oBAAoBzC,GAAY,CAC7CjI,QAAQC,IAAI,mBACZ,IAAK,IAAIwC,EAAI,EAAGA,EAAIgH,KAAK1B,aAAarF,OAAQD,IAAK,CACpCgH,KAAK1B,aAAatF,GACpBwF,YAAcoC,EAAWpC,YACpCwB,KAAK1B,aAAatF,GAAK4H,SAOzBZ,KAAK1B,aAAapF,KAAK0H,GAGxB,OAAOZ,KAAKW,gB,qCAIElC,GAAM,2BAEpB,YAAoBuB,KAAK1B,aAAzB,+CAAuC,CACtC,GADsC,QAC1BG,OAASA,EAEpB,OAAO,GALW,kFASpB,OAAO,I,0CAMYyC,GAAQ,2BAE3B,YAAoBlB,KAAK1B,aAAzB,+CAAuC,CACtC,GADsC,QAC1BE,YAAc0C,EAEzB,OAAO,GALkB,kFAS3B,OAAO,I,oCAaP,OALAtC,EAAUhC,OACCoD,KAAKmB,aAEfnB,KAAKM,OAAOc,WAAWpB,OAEjB,I,sCAMPA,KAAKK,MAAQL,KAAKK,MAAQ,EAC1B3B,EAAS9B,OACU,IAAfoD,KAAKK,MACRL,KAAKqB,QAGLC,IAAMzI,MAAM,UAAYmH,KAAKK,MAAQ,oBAAqB,CACzDkB,SAAU,aACVC,UAAW,IACXC,aAAa,EACbC,cAAc,EACdC,WAAW,EACXC,WAAYC,IACZC,iBAAiB,IAElB9B,KAAKM,OAAOc,WAAWpB,S,kCAQxB,OADAzJ,QAAQC,IAAI,oDACRwJ,KAAK1B,aAAarF,SAAW+G,KAAKC,eAAehH,SACpD+G,KAAK+B,WACE,K,iJAQRT,IAAMS,QAAQ,6BAA8B,CAC3CR,SAAU,aACVC,UAAW,IACXC,aAAa,EACbC,cAAc,EACdC,WAAW,EACXC,WAAYC,IACZC,iBAAiB,IAElBhD,EAAalC,O,SACPoD,KAAKM,OAAO0B,a,cAClBhC,KAAKrK,KAAO,WACZqK,KAAK/D,OAAS,UACd+D,KAAKM,OAAOc,WAAWpB,M,mBAChB,G,oPASPsB,IAAMzI,MAAM,6BAA8B,CACzC0I,SAAU,aACVC,UAAW,IACXC,aAAa,EACbC,cAAc,EACdC,WAAW,EACXC,WAAYC,IACZC,iBAAiB,IAElB9C,EAAUpC,O,SACJoD,KAAKM,OAAO0B,a,OAClBhC,KAAKrK,KAAO,WACZqK,KAAK/D,OAAS,OACd+D,KAAKM,OAAOc,WAAWpB,M,8IAKNC,GACjBD,KAAKC,eAAiBA,EACtBD,KAAKG,UAAYF,EAAehH,S,qCAIlBiH,GACdF,KAAKE,YAAcA,I,iCAITW,GACVb,KAAKa,QAAUA,I,8BAIRoB,GACPjC,KAAKiC,KAAOA,I,4CAqBZ,OAAOjC,KAAKkC,mB,uCAMZ,IAAIpJ,EAAOkH,KAAKzH,SAASO,KAIrBqJ,EAAa,IAAIC,OADpB,iHACuC,KAIpCC,EAASvJ,EAAKwJ,MAAMH,GAGxB,GAAe,OAAXE,EAGH,OADArC,KAAKrK,KAAO,UACL,KAGR,IAAI4M,EAAqB,GAErBC,EAAkB,EAGlBC,EAAU3J,EAAKG,OACfyJ,EAAoB,EAEvBA,EADGD,GAAW,GACM,EACVA,EAAU,IAAMA,GAAW,IACjB,EACVA,EAAU,KAAOA,GAAW,KAClB,EAEA,EAGrBE,GAAU,GAEV,IAAK,IAAI3J,EAAI,EAAGA,EAAI0J,EAAmB1J,IAAK,CAK3C,IAHA,IAAI4J,EAAUC,GAAqBR,EAAOpJ,OAAS,GAC/C8E,EAAgBsE,EAAOO,IAG4B,IAAtDE,GAAe/E,EAAewE,IAC9BC,EAAkBH,EAAOpJ,OAAS,GAGlC8E,EAAgBsE,EADhBO,EAAUC,GAAqBR,EAAOpJ,OAAS,IAE/CuJ,IAID,GAAIA,IAAoBH,EAAOpJ,OAAS,EAIvC,OAHA1C,QAAQC,IAAI,yBAEZwJ,KAAKrK,KAAO,UACL,KAEP,IAAIoN,GAAU,IAAI7D,EAAI8D,OAAQC,IAAIlF,GAE9BmF,EADa9D,EAAO+D,IAAIJ,GACH,GAAG,GAExBK,EAAYlG,EAAOgG,GAEvBX,EAAmBrJ,KAAK,CACvBuF,KAAMV,EACNsF,UAAWD,IAOd,OAAOpD,KAAKsD,gBAAgBf,K,sCAMbA,GAEf,IAAIzJ,EAAOkH,KAAKzH,SAASO,KAErByK,EAAiB,GAJc,uBAMnC,YAAiBhB,EAAjB,+CAAqC,CAAC,IAA7B9D,EAA4B,QAEhC+E,EAAmB,aAAS/E,EAAKA,KAAd,OACnBgF,EAAyB,IAAIrB,OAAOoB,GAGpCE,EAAW5K,EAAK6K,OAAOF,GACvBG,EAASF,EAAWjF,EAAKA,KAAKxF,OAAS,EAG3CsK,EAAerK,KAAK,CACnBuF,KAAMA,EAAKA,KACXoF,MAAOH,EACPI,IAAKF,EACL1E,IAAKT,EAAK4E,aApBuB,kFAgCnC,OAPAE,EAAeQ,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEH,MAAQI,EAAEJ,MAAQ,GAAK,KAGxDtN,QAAQC,IAAI,sBACZwJ,KAAKD,WAAawD,EAGXvD,KAAKQ,iB,qCAIZjK,QAAQC,IAAI,mBAQZ,IANA,IAAIsC,EAAOkH,KAAKzH,SAASO,KACrByK,EAAiBvD,KAAKD,WAEtBmE,EAAkB,GAGblL,EAAI,EAAGA,EAAIuK,EAAetK,OAAQD,IAAK,CAC/C,IAAImL,EAAYZ,EAAevK,GAC/BkL,EAAgBhL,KAAK,CACpBuF,KAAM0F,EAAU1F,KAChBR,MAAOjF,EACPkG,IAAKiF,EAAUjF,MAGhB,IAAIkF,EAAe,cAAUD,EAAU1F,KAApB,KACf4F,EAAiB,IAAIjC,OAAOgC,GAGhCtL,EAAOA,EAAKwL,QAAQD,EAAgB,sCAqBrC,IAhBA,IAAIE,EAAQzL,EAAK0L,MAAM,SAGnBC,EAAQ,GAGRC,EAAa,EAUR1L,EAPM,IAAZuL,EAAM,GACG,EAGA,EAGWvL,EAAIuL,EAAMtL,OAAQD,IAEvB,6BAAbuL,EAAMvL,IACTyL,EAAMvL,KACL,kBAAC,EAAD,CACCK,IAAKP,EACL+E,cAAemG,EAAgBQ,GAAYjG,KAC3CT,WAAYkG,EAAgBQ,GAAYzG,SAI1CyG,KAIAD,EAAMvL,KAAK,0BAAMK,IAAKP,GAAIuL,EAAMvL,KAIlC,GAAIyL,EAAMxL,OAAS,EAElB,OADA+G,KAAKM,OAAOqE,eAAe3E,KAAKzH,UACzB,KAKR,IADA,IAAI2H,EAAc,GAClB,MAAiBgE,EAAjB,eAAkC,CAA7B,IAAIzF,EAAI,KACZyB,EAAYhH,KAAK,CAChBuF,KAAMA,EAAKA,KACXR,MAAOQ,EAAKR,QAEb,IAAK,IAAIjF,EAAI,EAAGA,EAAI,EAAGA,IAAK,CAC3B,IAAI4L,EAAWtF,EAAUuF,KAAV,aAAqBpG,EAAKS,IAA1B,QACX4F,EAAaC,GAAatG,EAAKA,KAAMmG,GACzC1E,EAAYhH,KAAK,CAChBuF,KAAMqG,EACN7G,OAAQ,KAYX,OALA+B,KAAKgF,eAAe9E,GACpBF,KAAKiF,kBAAkBf,GAEvB3N,QAAQC,IAAIiO,GAELA,K,gCAnOQS,GACf,IAAIC,EAAc,IAAItF,EAAUqF,EAAe3M,SAAU2M,EAAenF,YAaxE,MAXyB,YAArBoF,EAAYxP,OACfwP,EAAYxP,KAAO,aAEpBwP,EAAYlF,eAAiBiF,EAAejF,eAC5CkF,EAAYjF,YAAcgF,EAAehF,YACzCiF,EAAYhF,UAAY+E,EAAe/E,UACvCgF,EAAY/E,WAAa8E,EAAe9E,WACxC+E,EAAY7G,aAAe4G,EAAe5G,aAC1C6G,EAAY9E,MAAQ6E,EAAe7E,MACnC8E,EAAY7E,OAAS,IAAIC,GAElB4E,M,KA0NLJ,GAAe,SAACK,EAAWC,GAM9B,IAJA,IAAIC,EAAY,GACZtM,EAAI,EACJuM,GAAU,EACVC,EAAc,GACXxM,EAAIoM,EAAUnM,QACpBqM,EAAYF,EAAUK,OAAOzM,GAExB0M,MAAkB,EAAZJ,IAGNA,IAAcA,EAAUK,eAGvBN,EAASrM,KACZwM,EAAYxM,GAAKqM,EAASrM,GAAG2M,eAG3BL,IAAcA,EAAUM,gBAE3BL,GAAU,EACNF,EAASrM,KACZwM,EAAYxM,GAAKqM,EAASrM,GAAG4M,iBAb/BC,MAAM,wBAiBP7M,IAGD,IAAgB,IAAZuM,EACH,KAAOvM,EAAIqM,EAASpM,QACnBuM,EAAYxM,GAAKqM,EAASrM,GAAG2M,cAC7B3M,SAID,KAAOA,EAAIqM,EAASpM,QACnBuM,EAAYxM,GAAKqM,EAASrM,GAC1BA,IAIF,OAAOwM,EAAYM,KAAK,KAIrBnD,GAAU,GAEVE,GAAuB,SAAAkD,GAG1B,IADA,IAAIC,EAAStG,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMoG,IAC5CpD,GAAQsD,SAASD,IAAWrD,GAAQ1J,OAAS8M,GACnDC,EAAStG,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMoG,IAGhD,OADApD,GAAQzJ,KAAK8M,GACNA,GAIJlD,GAAiB,SAACrE,EAAM8D,GAE3B,GAAI9D,EAAKxF,OAAS,EACjB,OAAO,EAGR,GAAIsJ,EAAmB0D,SAASxH,GAC/B,OAAO,EAGR,IAAIsE,GAAU,IAAI7D,EAAI8D,OAAQC,IAAIxE,GAE9ByE,EADa9D,EAAO+D,IAAIJ,GACH,GAAG,GAC5B,MACa,OAAZG,GACY,QAAZA,GACY,OAAZA,GACY,QAAZA,GACY,QAAZA,GACY,OAAZA,GACY,QAAZA,GACY,QAAZA,GACY,QAAZA,GACY,QAAZA,GACY,QAAZA,GGhjBExE,GAAW,IAAIjD,MAAMkD,KAErBG,IADY,IAAIrD,MAAMoD,KACP,IAAIpD,MAAMsD,MACzBC,GAAY,IAAIvD,MAAMwD,KAELiH,G,WACjB,WAAYpG,GAAW,oBAEnBvJ,QAAQC,IAAI,4BACZwJ,KAAKzH,SAAWuH,EAChBE,KAAKrK,KAAO,cAEZqK,KAAKmG,cAAgB,GACrBnG,KAAKK,MAAQ,EAEbL,KAAKM,OAAS,IAAIC,G,uDAIlB,OAAOP,KAAKK,Q,gCAKZL,KAAKM,OAAOI,Y,gFAIO0F,EAAYC,G,sFAE3BC,EAAU,UACAxM,IAAVyM,G,gBACApO,EAAQoO,GAAMC,WAEVF,OADexM,IAAfsM,EACUA,EAGAjO,EAAMF,KAAKjC,c,+BAIN8D,IAAfsM,E,iBACAE,EAAUF,E,yCAGMpG,KAAKM,OAAOmG,kB,QAA5BH,E,eAcR,IAVA/P,QAAQC,IAAI8P,IAERI,EAAgB1G,KAAKzH,SAAS7C,MAEpBmL,SAAU,GAEpBsF,EAAgB,IAENjN,KAAKwN,GAEV1N,EAAI,EAAGA,EAAI,EAAGA,IACnB,GAAgB,OAAZsN,EAAkB,CAGlB,IAFI1D,EAAUC,GAAqByD,EAAQrN,OAAS,GAChD0N,EAAaL,EAAQ1D,GAClB+D,EAAWhP,SAAW+O,EAAc/O,QACvCiL,EAAUC,GAAqByD,EAAQrN,OAAS,GAChD0N,EAAaL,EAAQ1D,GAEzB+D,EAAW9F,SAAU,EACrBsF,EAAcjN,KAAKyN,GAI3B3G,KAAKmG,cAAgBA,EAEhBE,GACDrG,KAAKM,OAAOc,WAAWpB,M,2IAKpBa,GAEHA,EACAb,KAAK+B,UAGClB,GACNb,KAAKc,kB,sCAMTd,KAAKK,MAAQL,KAAKK,MAAQ,EAC1B3B,GAAS9B,OACU,IAAfoD,KAAKK,MACLL,KAAKqB,QAGLC,IAAMzI,MAAM,UAAYmH,KAAKK,MAAQ,oBAAqB,CACtDkB,SAAU,aACVC,UAAW,IACXC,aAAa,EACbC,cAAc,EACdC,WAAW,EACXC,WAAYC,IACZC,iBAAiB,IAErB9B,KAAKM,OAAOc,WAAWpB,S,iJAM3BsB,IAAMS,QAAQ,6BAA8B,CACxCR,SAAU,aACVC,UAAW,IACXC,aAAa,EACbC,cAAc,EACdC,WAAW,EACXC,WAAYC,IACZC,iBAAiB,IAErBhD,GAAalC,O,SACPoD,KAAKM,OAAO0B,a,OAClBhC,KAAK/D,OAAS,UACd+D,KAAKrK,KAAO,WACZqK,KAAKM,OAAOc,WAAWpB,M,oPAMvBsB,IAAMzI,MAAM,6BAA8B,CACtC0I,SAAU,aACVC,UAAW,IACXC,aAAa,EACbC,cAAc,EACdC,WAAW,EACXC,WAAYC,IACZC,iBAAiB,IAErB9C,GAAUpC,O,SACJoD,KAAKM,OAAO0B,a,OAClBhC,KAAK/D,OAAS,OACd+D,KAAKrK,KAAO,WACZqK,KAAKM,OAAOc,WAAWpB,M,uIAGXkF,GACZ,IAAIC,EAAc,IAAIe,EAAYhB,EAAe3M,UAGjD,OAFA4M,EAAY7E,OAAS,IAAIC,GACzB4E,EAAYxP,KAAO,cACZwP,M,KAKXxC,GAAU,GAEVE,GAAuB,SAAAkD,GAEvB,IADA,IAAIC,EAAStG,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMoG,IAC5CpD,GAAQsD,SAASD,IAAWrD,GAAQ1J,OAAS8M,GAChDC,EAAStG,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAMoG,IAGnD,OADApD,GAAQzJ,KAAK8M,GACNA,GCpKPY,GAAKzH,EAAQ,KAWIoB,G,4NAIjBhK,QAAQC,IAAI,Q,SACOwJ,KAAK6G,iB,cAApBC,E,gBACgB9G,KAAKyG,kB,cAArBH,E,gBACgBtG,KAAKU,SAAQ,EAAMoG,EAAQR,G,cAA3C5F,E,OACAxK,EAAmB,KACR,OAAX4Q,GAAmBA,EAAO7N,OAAS,IACrC/C,EAAmB4Q,EAAOA,EAAO7N,OAAS,GAAG8N,SAE3CrG,GAAWoG,GAAUR,EACvBC,GAAM/Q,SAASM,EAAmB4K,EAAS4F,EAASQ,EAAQ5Q,KAG7C,OAAX4Q,IACFpG,EAAQ/K,KAAO,YAEjBY,QAAQsC,MAAM,oCACd0N,GAAM/Q,SAASM,EAAmB4K,EAAS4F,EAASQ,EAAQ5Q,K,kBAEvD8Q,QAAQC,W,kNAOHC,EAAcJ,EAAQR,G,kFAClC/P,QAAQC,IAAI,qBAER2B,EAAQoO,GAAMC,WAGdM,GACFvQ,QAAQC,IAAI,0BACZ2Q,EAAYL,IAGZvQ,QAAQC,IAAI,2BACZ2Q,EAAYhP,EAAMF,KAAKhC,gBAGrBkR,GAAaA,EAAUlO,OAAS,G,oBAE9BmO,EAAaD,EAAUE,OAAO,EAAG,GAElBC,MAEC,EAIG,aAFrB5G,EAAU,IAAIb,EAAUuH,EAAW,KAEvBzR,OACV+K,EAAU,IAAIwF,GAAYkB,EAAW,IACjCd,GACF5F,EAAQ6G,iBAAiBjB,GAE3B5F,EAAQ6G,qBAKV7G,EAAU,IAAIwF,GAAYkB,EAAW,IACjCd,GACF5F,EAAQ6G,iBAAiBjB,GAE3B5F,EAAQ6G,qBAGW,IAAjBL,E,0CACKxG,G,QAKPV,KAAKwH,aAAaL,GAClBnH,KAAKoB,WAAWV,G,uCAMlBnK,QAAQC,IAAI,gC,UACUwJ,KAAK6G,iB,QAAvBY,E,OACJlR,QAAQC,IAAIiR,GACM,OAAdA,GAAsBC,OAAOC,KAAKF,GAAWxO,OAAS,GACxD1C,QAAQsC,MAAM,6CACa,OAAvBV,EAAMF,KAAKlC,QACboC,EAAMF,KAAKlC,QAAQJ,KAAO,YAG1BwC,EAAMF,KAAKlC,QAAU,GACrBoC,EAAMF,KAAKlC,QAAQJ,KAAO,YAE5BqK,KAAKoB,WAAWjJ,EAAMF,KAAKlC,WAG3BQ,QAAQC,IAAI,OAASkR,OAAOC,KAAKF,GAAWxO,OAAS,EAAI,gBACzD+G,KAAKwH,aAAaC,GAClBzH,KAAKU,W,4LAWIkH,GACbrR,QAAQC,IAAI,oDAEE,IAAI0P,GAAY0B,GACtBL,sBAAiBzN,GAAW,K,mCAKzBgN,GACX,IAAI5Q,EAAmB,KACnB4Q,EAAO7N,OAAS,IAClB/C,EAAmB4Q,EAAOA,EAAO7N,OAAS,GAAG8N,SAE/CR,GAAM/Q,SbzGwB,SAACS,EAAcC,GAAf,MAChC,CACAP,KAAM,oBACNM,aAAcA,EACdE,mBAAoBC,KAAKC,MACzBH,iBAAkBA,GaoGD2R,CAAmBf,EAAQ5Q,M,oJAM1CqQ,GAAM/Q,SbhFqB,CAC7BG,KAAM,mBagFJ4Q,GAAM/Q,SbzEuB,CAC/BG,KAAM,qB,kBa0EG,IAAIqR,SAAQ,SAAAC,GAAO,OAAIa,YAC5B,WACEb,MACC,S,kIAIIvG,GAET6F,GAAM/Q,SbnH+B,CACvCG,KAAM,mBACNI,QaiH+B2K,M,8EAIVqH,G,uFAEf5P,EAAQoO,GAAMC,WAClBjQ,QAAQC,IAAI,kBAGmB,OAA3B2B,EAAMzC,KAAKsS,Y,oBAETC,EAAY9P,EAAMzC,KAAKsS,YAAYE,gBAAgBrS,MACnDsS,EAAkBhQ,EAAMzC,KAAKsS,YAAYE,gBAAgBE,YAEzDlS,EAAmBiC,EAAMF,KAAK/B,iBAEhB,OAAd+R,GAA0C,OAApBE,E,iCACXE,MAAM,sDAAD,OACsCJ,EADtC,gBACuDE,GADvD,OAEhBjS,EAAgB,iBAAaA,GAAb,IAEhB,CAAEoS,QAAS,CAAE,eAAgB,qCAE5BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEJ,IAAIA,EAmBF,OAAO,KAjBP,GADAnS,QAAQC,IAAIkS,GACRA,EAASC,OAEX,OADApS,QAAQsC,MAAM,8BACP,KAGP,IAAI5C,EAAe2S,GAAeF,GAElC,IAAIX,EAIF,OAAO9R,EAHP,EAAKuR,aAAavR,MAYzB4S,OAAM,SAAAL,GAEL,OADAjS,QAAQC,IAAIgS,GACL,Q,gDAGXjS,QAAQsC,MAAM,gC,oRAQdiQ,EAAc,G,SAGGC,K,OAAjBL,E,OACJnS,QAAQC,IAAIkS,G,WAILA,GAAaA,EAASC,SAAoC,IAA1BD,EAASM,Y,iBAC9C,I,4BAAA,EAAiBN,EAASO,MAA1B,+CAASvT,EAAwB,QAC/BoT,EAAY5P,KAAKxD,G,gPAEnBwT,EAASR,EAASS,gB,UACDJ,GAAaG,G,QAA9BR,E,OACAnS,QAAQC,IAAIkS,G,4BAIVI,EAAY7P,OAAS,G,wBAEnBjD,EAAgBoT,GAAgBN,G,kBAE7B9B,QAAQC,QAAQjR,I,eAGvBO,QAAQsC,MAAM,2C,kBACPmO,QAAQC,QAAQ,O,yIAMzBK,GAAmB,WACrB,OAAO5H,KAAKC,MAAMD,KAAKE,SAAWF,KAAKC,MAAM,KAIzCoJ,GAAY,uCAAG,WAAOG,GAAP,mBAAAlF,EAAA,yDAEf7L,EAAQoO,GAAMC,WAEdyB,EAAY9P,EAAMzC,KAAKsS,YAAYE,gBAAgBrS,MACnDsS,EAAkBhQ,EAAMzC,KAAKsS,YAAYE,gBAAgBE,YAE3C,OAAdH,GAA0C,OAApBE,EAPP,gCAQJE,MAAM,0DAAD,OAC0CJ,EAD1C,gBAC2DE,GAD3D,OAC6Ee,EAAM,kBAAcA,GAAd,IACnG,CAAEZ,QAAS,CAAE,eAAgB,qCAE5BC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAEJ,OAAIA,EAASC,QACXpS,QAAQsC,MAAM,4BACdtC,QAAQsC,MAAM6P,EAASC,QAChB,MAEGD,KAEbG,OAAM,SAAAQ,GAEL,OADA9S,QAAQsC,MAAMwQ,GACP,QAxBM,sDA4BjB9S,QAAQsC,MAAM,mCA5BG,kBA6BVmO,QAAQC,WA7BE,4CAAH,sDAkCdmC,GAAkB,SAACE,GACrB,IAAItT,EAAgB,GAEpB,GAAIsT,EAAY,CAAC,IAAD,uBACd,YAAiBA,EAAjB,+CAA6B,CAAC,IAArB5T,EAAoB,QAC3BM,EAAckD,KAAK,CACjBxB,KAAMhC,EAAKgC,KACX6R,IAAK7T,EAAK8T,kBACV7R,OAAQjC,EAAK+T,eALH,kFAUd,OAAOzT,EAKPO,QAAQsC,MAAM,0CAKZ+P,GAAiB,SAAAc,GACrB,IAAIjC,EAAY,GADkB,uBAGlC,YAAkBiC,EAAlB,+CAA6B,CAAC,IAArB9B,EAAoB,QAE3B,GAAIA,EAAM+B,iBACRpT,QAAQC,IAAI,uCACP,GAAoC,OAAhCoR,EAAMgC,sBACfrT,QAAQC,IAAI,oCACP,CAEL,IAAIsJ,EAAW,GAQf,GAPAA,EAASpG,KAAOkO,EAAMiC,WACtB/J,EAASiH,QAAUa,EAAMkC,OACzBhK,EAAShH,KAAO8N,GAAGmD,OAAOnC,EAAMoC,WAChClK,EAAS/G,KAAO,KACZ6O,EAAMqC,SAASlR,KAAKE,OAAS,IAC/B6G,EAAS/G,KAAO6O,EAAMqC,SAASlR,MAEX,OAAlB+G,EAAS/G,KAAe,CAAC,IAAD,uBAC1B,YAAgB+G,EAAS/G,KAAzB,+CAA+B,CAAC,IAAvB8B,EAAsB,QAC7BiF,EAAShH,KAAOgH,EAAShH,KAAKwL,QAAQzJ,EAAIA,IAAK,KAFvB,mFAY5B,GANAiF,EAASpK,KAAO,GAChBoK,EAASpK,KAAKgC,KAAOkQ,EAAMlS,KAAKgC,KAChCoI,EAASpK,KAAK6T,IAAM3B,EAAMlS,KAAK8T,kBAC/B1J,EAASpK,KAAKiC,OAASiQ,EAAMlS,KAAK+T,YAG9B7B,EAAMsC,kBAAmB,CAC3BpK,EAASlF,MAAQ,GACjBkF,EAASpF,UAAW,EACpB,IAAK,IAAI1B,EAAI,EAAGA,EAAI4O,EAAMsC,kBAAkBtP,MAAM3B,OAAQD,IACxD8G,EAASlF,MAAM5B,GAAK,GACpB8G,EAASlF,MAAM5B,GAAGrD,KAAOiS,EAAMsC,kBAAkBtP,MAAM5B,GAAGrD,KAE1DmK,EAAShH,KAAOgH,EAAShH,KAAKwL,QAC5BsD,EAAMsC,kBAAkBtP,MAAM5B,GAAG6B,IACjC,IAE6B,UAA3BiF,EAASlF,MAAM5B,GAAGrD,KACpBmK,EAASlF,MAAM5B,GAAG6B,IAChB+M,EAAMsC,kBAAkBtP,MAAM5B,GAAGmR,gBACC,UAA3BrK,EAASlF,MAAM5B,GAAGrD,MAC3BmK,EAASlF,MAAM5B,GAAG6B,IAChB+M,EAAMsC,kBAAkBtP,MAAM5B,GAAGoR,WAAWC,SAAS,GAAGxP,IAC1DiF,EAASlF,MAAM5B,GAAGoC,OAChBwM,EAAMsC,kBAAkBtP,MAAM5B,GAAGoR,WAAWC,SAAS,GAAGC,cACtB,iBAA3BxK,EAASlF,MAAM5B,GAAGrD,OAE3BmK,EAASlF,MAAM5B,GAAGrD,KAAO,QACzBmK,EAASlF,MAAM5B,GAAG6B,IAChB+M,EAAMsC,kBAAkBtP,MAAM5B,GAAGoR,WAAWC,SAAS,GAAGxP,IAC1DiF,EAASlF,MAAM5B,GAAGoC,OAChBwM,EAAMsC,kBAAkBtP,MAAM5B,GAAGoR,WAAWC,SAAS,GAAGC,mBAK9DxK,EAASpF,UAAW,EAItB,IAA8B,IAA1BkN,EAAM2C,gBAA0B,CAWlC,GAVAzK,EAAS1D,SAAU,EAEnB0D,EAASpH,WAAa,GACtBoH,EAASpH,WAAWI,KAAO8N,GAAGmD,OAAOnC,EAAM4C,cAAcR,WACzDlK,EAASpH,WAAWgB,KAAOkO,EAAM4C,cAAcX,WAC/C/J,EAASpH,WAAWqO,QAAUa,EAAM4C,cAAcV,OAClDhK,EAASpH,WAAWK,KAAO,KACvB6O,EAAM4C,cAAcP,SAASlR,KAAKE,OAAS,IAC7C6G,EAASpH,WAAWK,KAAO6O,EAAM4C,cAAcP,SAASlR,MAEzB,OAA7B+G,EAASpH,WAAWK,KAAe,CAAC,IAAD,uBACrC,YAAgB+G,EAASpH,WAAWK,KAApC,+CAA0C,CAAC,IAAlC8B,EAAiC,QACxCiF,EAASpH,WAAWI,KAAOgH,EAASpH,WAAWI,KAAKwL,QAClDzJ,EAAIA,IACJ,KAJiC,mFAiBvC,GARAiF,EAASpH,WAAWhD,KAAO,GAC3BoK,EAASpH,WAAWhD,KAAKgC,KAAOkQ,EAAM4C,cAAc9U,KAAKgC,KACzDoI,EAASpH,WAAWhD,KAAK6T,IACvB3B,EAAM4C,cAAc9U,KAAK8T,kBAC3B1J,EAASpH,WAAWhD,KAAKiC,OAASiQ,EAAM4C,cAAc9U,KAAK+T,YAIvD7B,EAAM4C,cAAcN,kBAAmB,CACzCpK,EAASpH,WAAWkC,MAAQ,CAAC,IAC7BkF,EAASpH,WAAWgC,UAAW,EAC/B,IACE,IAAI1B,EAAI,EACRA,EAAI4O,EAAM4C,cAAcN,kBAAkBtP,MAAM3B,OAChDD,IAGA8G,EAASpH,WAAWI,KAAOgH,EAASpH,WAAWI,KAAKwL,QAClDsD,EAAM4C,cAAcN,kBAAkBtP,MAAM5B,GAAG6B,IAC/C,IAEFiF,EAASpH,WAAWkC,MAAM5B,GAAK,GACW,UAAtC8G,EAASpH,WAAWkC,MAAM5B,GAAGrD,KAC/BmK,EAASpH,WAAWkC,MAAM5B,GAAG6B,IAC3B+M,EAAM4C,cAAcN,kBAAkBtP,MAAM5B,GAAGmR,gBACF,UAAtCrK,EAASpH,WAAWkC,MAAM5B,GAAGrD,OACtCmK,EAASpH,WAAWkC,MAAM5B,GAAG6B,IAC3B+M,EAAM4C,cAAcN,kBAAkBtP,MACpC5B,GACAoR,WAAWC,SAAS,GAAGxP,UAI/BiF,EAASpH,WAAWgC,UAAW,OAGjCoF,EAAS1D,SAAU,EAIjB0D,EAAShH,KAAKG,OAAS,IAA0B,IAArB6G,EAAS1D,QACvCqL,EAAUgD,QAAQ3K,IACY,IAArBA,EAAS1D,QACd0D,EAAShH,KAAKG,OAAS,GAAK6G,EAASpH,WAAWI,KAAKG,OAAS,GAChEwO,EAAUgD,QAAQ3K,GAGpBvJ,QAAQC,IACN,oEArI0B,kFA4IlC,OAFAD,QAAQC,IAAIiR,GAELA,G,oBHxcLiD,GAAa,IAAIjP,MAAMkP,MAEvBC,GAAiB,IAAIrK,GAMrBsK,GAAc,uCAAG,WAAOxJ,GAAP,SAAA2C,EAAA,sDACjB0G,GAAW9N,QACE,IAATyE,GACA7L,EViEyB,CAC/BG,KAAM,qBUjEAmS,YAAW,WACP8C,GAAelK,UACflL,EVkDkB,CAC5BG,KAAM,oBUlDG,OAGHH,EVkDuB,CAC7BG,KAAM,mBUlDAH,EVyDyB,CAC/BG,KAAM,qBUzDAmS,YAAW,WACP8C,GAAelK,YAChB,MAdU,2CAAH,sDA+CHoK,GA5BE,WAEbtV,EAAW4E,cAEX,IAAIrE,EAAUmC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,KAAKlC,WAE1CgV,EAAU,mBAEV1J,GAAO,EAYX,OAVgB,OAAZtL,GACqB,aAAjBA,EAAQJ,MACe,SAAnBI,EAAQkG,SACRoF,GAAO,EACP0J,EAAU,sBAOlB,yBAAKlT,UAAU,qBACX,4BAAKkT,GACL,4BAAQ/P,QAAS,kBAAM6P,GAAexJ,KAAtC,iBIUG2J,GA/DE,SAAAhT,GACf,IAAIiT,EAAU/S,aAAY,SAAAC,GAAK,OAAIA,EAAMF,KAAKlC,WAGxC0I,EAAOzG,EAAMyG,KACbR,EAAQjG,EAAMiG,MAChBiN,GAAS,EACTC,EAAU,EAEV7Q,EAAU,KATU,EAaO8Q,YAAQ,CACrCxU,KAAM,CAAEwH,MAAOK,EAAMR,MAAOA,EAAOtI,KAAM,QAEzCmO,IAAK,SAAClN,EAAMC,GACV,IAAMwU,EAAaxU,EAAQyU,gBAEvB1U,GAAQyU,IACVH,GAAS,EAETD,EAAQM,WAAW3U,EAAKwH,MAAOiN,EAAWpN,MAAOrH,EAAKqH,SAG1DuN,QAAS,CACPC,WAAY,QAEd3U,QAAS,SAAAD,GAAO,MAAK,CACnB6U,WAAY7U,EAAQ6U,iBA7BA,mBAafA,EAbe,KAafA,WAAcC,EAbC,KAmCxB,GAHAR,EAAUO,EAAa,GAAM,EAGb,OAAZT,EAAkB,4BAEpB,YAAoBA,EAAQ3M,aAA5B,+CAA0C,SAC5BG,OAASA,IACnByM,GAAS,EACTC,EAAU,KALM,mFAWtB,IAAMS,EAAiBV,EAAS,eAAiB,OAcjD,OAVa,OAATzM,IACFnE,EACE,yBAAKzC,UAAU,gBACb,yBAAKD,IAAK+T,EAAM7T,MAAO,CAAEqT,UAASS,kBAAkB/T,UAAU,aAC3D4G,KAMF,kBAAC,WAAD,KAAWnE,ICfLuR,GA5CI,SAAA7T,GACf,IAQIsC,EARAwR,EAAa5T,aAAY,SAAAC,GAAK,OAAIA,EAAMF,KAAKlC,WAE3C2B,EAAOM,EAAMN,KACbmD,EAAM7C,EAAM6C,IACZlD,EAASK,EAAML,OACfoU,EAAO/T,EAAM+T,KACblL,EAAU7I,EAAM6I,QAPE,EAW2BuK,YAAQ,CACvDxU,KAAM,CAAEa,OAAQ,CAAEC,KAAMA,EAAMmD,IAAKA,EAAKlD,OAAQA,EAAQoU,KAAMA,GAAQlL,QAASA,EAASlL,KAAM,UAE9FmO,IAAK,SAAClN,EAAMC,GACR,IAAMwU,EAAaxU,EAAQyU,gBAEvB1U,GAAQyU,GAERS,EAAWP,WAAW3U,EAAKiK,UAGnC2K,QAAS,CACLC,WAAY,QAEhB3U,QAAS,SAAAD,GAAO,MAAK,CACjB6U,WAAY7U,EAAQ6U,aACpB3U,OAAQF,EAAQmV,eAChBC,WAAYpV,EAAQqV,4BA5BJ,0BAWfR,EAXe,EAWfA,WAAkCC,GAXnB,EAWH5U,OAXG,EAWKkV,WAXL,MAgClBd,EAAUO,EAAa,GAAM,EAQnC,OANApR,EACI,yBAAKzC,UAAU,cAAcC,MAAO,CAACqT,YACjC,wBAAItT,UAAW,kBAAmBD,IAAK+T,GAAOjU,EAA9C,IAAoD,0BAAMG,UAAW,sBAAjB,KAA0CF,KAI/F,kBAAC,WAAD,KAAW2C,ICxCX6R,GAAiB,SAAUC,GAGlC,IACIC,EADY,IAAIjW,KAAKgW,GACCE,UAKtBC,GAJU,IAAInW,MACIkW,UAGQD,EAE9BE,GAA8B,IAC9B,IAAIC,EAAU9M,KAAKC,MAAM4M,EAAgB,IACzCA,GAA8B,GAC9B,IAAIE,EAAU/M,KAAKC,MAAM4M,EAAgB,IACzCA,GAA8B,GAC9B,IAAIG,EAAQhN,KAAKC,MAAM4M,EAAgB,IACnCI,EAAOjN,KAAKC,MAAM4M,EAAc,IAEpC,OAAGI,EAAO,EACCA,EAAO,IAEVD,EAAQ,EACLA,EAAQ,IAEXD,EAAU,EACPA,EAAU,IAEbD,EAAU,EACPA,EAAU,IAGV,MC/BXI,GAAU,SAACC,GAIX,IAHA,IAAiCC,EAAgBC,EAA7CC,EAAeH,EAAM5T,OAGlB,IAAM+T,GAGTD,EAAcrN,KAAKC,MAAMD,KAAKE,SAAWoN,GAIzCF,EAAiBD,EAHjBG,GAAgB,GAIhBH,EAAMG,GAAgBH,EAAME,GAC5BF,EAAME,GAAeD,EAGzB,OAAOD,GA6CII,GA1CK,WAChB,IAAIhV,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,KAAKlC,WAIvC8B,EAAY,gCAEZyC,EAAU,KACd,GAAa,OAATrC,EAAe,CACf,IAAIoU,EAAYF,GAAelU,EAAKM,SAASmB,MAC3B,cAAdzB,EAAKtC,KACDsC,EAAKiI,YAAYjH,OAAS,IAC1BhB,EAAKiI,YAAc0M,GAAQ3U,EAAKiI,aAEhC5F,EACIrC,EAAKiI,YAAYgN,KAAI,SAACzO,EAAMlF,GAAP,OACjB,kBAAC,GAAD,CAAUkF,KAAMA,EAAKA,KAAMR,MAAOQ,EAAKR,MAAO1E,IAAKA,QAK5C,gBAAdtB,EAAKtC,KACNsC,EAAKkO,cAAclN,OAAS,IAC5BpB,EAAY,yBACZI,EAAKkO,cAAgByG,GAAQ3U,EAAKkO,eAClC7L,EAAUrC,EAAKkO,cAAc+G,KAAI,SAACxX,EAAM6D,GAAP,OAC7B,kBAAC,GAAD,CAAYA,IAAKA,EAAK7B,KAAMhC,EAAKgC,KAAMmD,IAAKnF,EAAK6T,IAAK5R,OAAQjC,EAAKiC,OAAQoU,KAAMM,EAAWxL,QAASnL,EAAKmL,cAMlHtK,QAAQsC,MAAM,2CAItB,OACI,yBAAKhB,UAAWA,GACXyC,ICjCE6S,GA1BD,WACV,IAAMpX,EAAUmC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,KAAKlC,WAE5CuE,EAAU,GAGd,GAAe,OAAZvE,EAAkB,CACjBuE,EAAQpB,KAAK,wBAAIrB,UAAU,QAAQ0B,IAAK,KAA3B,aAIb,IAFA,IAAI6T,EAAU,EAAIrX,EAAQsK,MACtBgN,EAAW,EACPrU,EAAI,EAAGA,EAAIoU,EAASpU,IACxBsB,EAAQpB,KAAK,wBAAIrB,UAAU,SAAS0B,IAAK8T,GAA5B,WACbA,IAGJ,IAAI,IAAIrU,EAAIqU,EAAUrU,EAAI,EAAGA,IACzBsB,EAAQpB,KAAK,wBAAIrB,UAAU,cAAc0B,IAAKP,GAAjC,gBAIjBsB,EAAU,KAGd,OAAO,yBAAKzC,UAAU,iBAAiByC,IPLvCoQ,GAAa,IAAIjP,MAAMkP,MACvBnP,GAAa,IAAIC,MAAMC,KACvBoD,GAAe,IAAIrD,MAAMsD,KAIzB6L,GAAiB,IAAIrK,GAEnB+M,GAAe,SAAAzU,GACnBtC,QAAQC,IAAI,0BACZD,QAAQC,IAAIqC,IAGR0U,GAAa,uCAAG,WAAO7E,GAAP,eAAA1E,EAAA,sDACdnO,EAAQ6S,EAASJ,QAAQkF,IAAI,gBACnCjX,QAAQC,IAAIkS,GACZA,EAASD,OAAOF,KAAhB,uCAAqB,WAAM7S,GAAN,SAAAsO,EAAA,sDAEfnO,IACFU,QAAQC,IAAI,2BACZsI,GAAalC,OAGbpH,EAASC,EAAWC,IAEpBF,EAASI,EAAYC,IAErBL,EX3CkD,CACtDG,KAAM,qBACN8X,iBWyCkC,KAXb,2CAArB,uDAHoB,2CAAH,sDAoBbC,GAAS,WACbhD,GAAW9N,OAEX+Q,aAAaC,WAAW,SAExBpY,EX5DmC,CACnCG,KAAM,WWuQOkY,GAxMH,WAEV,IAKIC,EALEpY,EAAOwC,aAAY,SAAAC,GAAK,OAAIA,EAAMzC,QAClCuC,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMF,QAEpC8V,EAAiB7V,aAAY,SAAAC,GAAK,OAAIA,EAAM4D,GAAGiS,aAG/CC,EAAY,YACZjR,EAAW,GAEXd,EAAY,OACZC,EAAe,KAEI,IAAnB4R,IACF5R,EAAe,KAMjB,IAA6B,IAAzBzG,EAAK+X,gBACP,GAAqB,OAAjBxV,EAAKlC,QAAkB,CAGrBK,KAAKC,MAAQ4B,EAAK9B,mBADL,OAEfI,QAAQC,IAAI,mFACZoU,GAAevE,OAEfpO,EAAKlC,QAAU,MAIc,aAAtBkC,EAAKlC,QAAQJ,MACpBuG,EAAY,QACZC,EAAe,IACf2R,EAAa,kBAAC,GAAD,MACbG,EAAY,SACZjR,EAAW,QAEkB,aAAtB/E,EAAKlC,QAAQJ,OAEpBuG,EAAY,OACZ4R,EACE,yBAAKjW,UAAU,iBACb,uDACA,gDACA,4BACEmD,QAAS,WACP0P,GAAW9N,OACXgO,GAAelK,WAEjB7I,UAAU,UALZ,UAYJoW,EAAY,SACZjR,EAAW,aAIb4N,GAAevE,OAQnB7Q,EAAW4E,cAGX,IAAIE,EAAU,KA2Hd,OAzHA/D,QAAQC,IAAI,SAAW0F,EAAY,0BAGjC5B,EADE5E,EAAK+X,iBAAoC,OAAjBxV,EAAKlC,QAE7B,yBAAK8B,UAAU,gBACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,SACb,mDAEF,yBAAKA,UAAU,aACb,yBAAKiD,IAAKpF,EAAKsS,YAAYkG,IAAKnT,IAAI,uBAAuBlD,UAAU,aACrE,wBAAIA,UAAU,aAAanC,EAAKsS,YAAYtQ,MAC5C,4BAAQG,UAAU,qBAAqBmD,QAAS,kBAAM0S,OAAtD,aAGJ,yBAAK7V,UAAW,aAAeoW,GAC7B,kBAAC,EAAD,MACA,kBAAC5R,EAAA,EAAD,CACEC,GAAIyR,EACJxR,WAAYL,EACZO,QAASN,GAET,yBAAKtE,UAAW,mBAAqBmF,EAAW,IAAMd,GAC7B,aAAtBjE,EAAKlC,QAAQJ,MAA6C,aAAtBsC,EAAKlC,QAAQJ,KAChD,kBAAC,WAAD,KACE,yBAAKkC,UAAU,QAAQiW,IAGzB,kBAAC,WAAD,KACE,kBAAC,GAAD,MACA,kBAAC,GAAD,WAYPpY,EAAK+X,gBAEV,yBAAK5V,UAAU,gBACb,yBAAKA,UAAU,WACb,yBAAKA,UAAU,SACb,6CAEF,yBAAKA,UAAU,aACb,yBAAKiD,IAAKpF,EAAKsS,YAAYkG,IAAKnT,IAAI,uBAAuBlD,UAAU,aACrE,wBAAIA,UAAU,aAAanC,EAAKsS,YAAYtQ,MAC5C,4BAAQG,UAAU,qBAAqBmD,QAAS,kBAAM0S,OAAtD,aAGJ,yBAAKS,GAAG,0BACN,yBAAKA,GAAG,yBAAyBC,MAAM,2BACrC,yBAAKA,MAAM,0BACX,yBAAKA,MAAM,0BACX,yBAAKA,MAAM,0BACX,yBAAKA,MAAM,0BACX,yBAAKA,MAAM,0BACX,yBAAKA,MAAM,6BAWjB,yBAAKvW,UAAU,gBACb,kBAACwE,EAAA,EAAD,CACIC,IAAI,EACJC,WAAY,YACZE,QAAS,IACTD,QAAQ,GAEZ,yBAAK3E,UAAU,WACb,yBAAKA,UAAU,SACb,6CAEF,yBAAKA,UAAU,aACb,kBAAC,IAAD,CACEwW,SAAS,sDACTC,UAAWhB,GACXiB,UAAWhB,GACXiB,gBAAgB,8DAChB3W,UAAU,kCACViB,KAAK,qBACL2V,UAAU,OAKhB,yBAAK5W,UAAW,iBACd,kBAACwE,EAAA,EAAD,CACEC,IAAI,EACJC,WAAY,gBACZC,QAAQ,EACRC,QAAS,IACTE,WAAY,kBAAMnB,GAAWoB,QAC7BC,UAAW,kBAAMrB,GAAWK,UAE5B,yBAAKhE,UAAU,2BACb,yBAAKA,UAAU,mBACb,wBAAIA,UAAU,iBAAd,4BACA,sGACA,8EAWP,kBAAC,WAAD,KAAWyC,I,glBQvQpB,IAAMoU,GAAa,CACfjB,iBAAiB,EACjBzF,YAAa,KACbC,UAAW,MA4BAvS,GAzBF,WAAiC,IAAhCyC,EAA+B,uDAAvBuW,GAAYC,EAAW,uCACzC,OAAOA,EAAOhZ,MACV,IAAK,QACD,OAAO+Y,GACX,IAAK,qBACD,OAAO,GAAP,GACOvW,EADP,CAEIsV,gBAAiBkB,EAAOlB,kBAEhC,IAAK,WACD,OAAO,GAAP,GACOtV,EADP,CAEI6P,YAAa2G,EAAOjZ,OAG5B,IAAK,YACD,OAAO,GAAP,GACOyC,EADP,CAEI8P,UAAW0G,EAAO9Y,QAE1B,QACI,OAAOsC,I,8jBC3BnB,IAAMyW,GAAa,CACjB1Y,iBAAkB,KAClBD,aAAc,KACdF,QAAS,KACTC,cAAe,KACfG,mBAAoB,MAoDP8B,GAjDF,WAAiC,IAAhCE,EAA+B,uDAAvByW,GAAYD,EAAW,uCAC3C,OAAQA,EAAOhZ,MACb,IAAK,QACH,OAAOiZ,GACT,IAAK,YACH,OAAO,MACFzW,EADL,CAEEpC,QAAS4Y,EAAO5Y,QAChBC,cAAe2Y,EAAO3Y,cACtBC,aAAc0Y,EAAO1Y,aACrBE,mBAAoBwY,EAAOxY,mBAC3BD,iBAAkByY,EAAOzY,mBAE7B,IAAK,mBACH,OAAO,MACFiC,EADL,CAEEpC,QAAS4Y,EAAO5Y,UAEpB,IAAK,yBACH,OAAO,MACFoC,EADL,CAEEjC,iBAAkByY,EAAOE,cAE7B,IAAK,oBACH,OAAgC,OAA5BF,EAAOzY,iBACF,MACFiC,EADL,CAEElC,aAAc0Y,EAAO1Y,aACrBE,mBAAoBwY,EAAOxY,qBAItB,MACFgC,EADL,CAEElC,aAAc0Y,EAAO1Y,aACrBE,mBAAoBwY,EAAOxY,mBAC3BD,iBAAkByY,EAAOzY,mBAG/B,IAAK,qBACH,OAAO,MACFiC,EADL,CAEEnC,cAAe2Y,EAAO3Y,gBAE1B,QACE,OAAOmC,I,8jBCrDb,IAAM2W,GAAiB,CACnB3U,WAAW,EACXF,MAAO,GAuBMD,GApBE,WAAqC,IAApC7B,EAAmC,uDAA3B2W,GAAgBH,EAAW,uCACnD,OAAQA,EAAOhZ,MACb,IAAK,QACH,OAAOmZ,GACT,IAAK,oBACH,OAAO,MACF3W,EADL,CAEEgC,WAAYhC,EAAMgC,YAEpB,IAAK,eACL,OAAO,MACFhC,EADL,CAEE8B,MAAO0U,EAAO1T,WAGlB,QACE,OAAO9C,I,8jBCrBf,ICoBIoO,GDpBEwI,GAAY,CACd/S,SAAS,EACTgS,WAAW,EACXgB,YAAY,GAuCDjT,GApCJ,WAAgC,IAA/B5D,EAA8B,uDAAtB4W,GAAWJ,EAAW,uCACtC,OAAQA,EAAOhZ,MACX,IAAK,QACD,OAAOoZ,GACX,IAAK,gBACD,OAAO,MACA5W,EADP,CAEI6D,SAAS,IAEjB,IAAK,iBACD,OAAO,MACA7D,EADP,CAEI6D,SAAS,IAEjB,IAAK,kBACD,OAAO,MACA7D,EADP,CAEI6V,WAAW,IAGnB,IAAK,mBACD,OAAO,MACA7V,EADP,CAEI6V,WAAW,IAGnB,IAAK,qBACD,OAAO,MACA7V,EADP,CAEI8P,WAAY9P,EAAM6W,aAE1B,QACI,OAAO7W,IEhCJ8W,gBAAgB,CAC7BvZ,QACAuC,QACA+B,YACA+B,Q,+BDQEmT,IAFiB,IAAI3O,GEbA,WACvBhK,QAAQC,IAAI,4BACZ,IACE,IAAM2Y,EAAkBxB,aAAazW,QAAQ,SAC7C,GAAwB,OAApBiY,EACF,OAEF,IAAIC,EAAcC,KAAKC,MAAMH,GAG7B,GAFA5Y,QAAQC,IAAI4Y,GAEqB,OAA7BA,EAAYnX,KAAKlC,QAAkB,CACrC,IAAIwZ,EAAe,GACmB,cAAlCH,EAAYnX,KAAKlC,QAAQJ,MAC3B4Z,EAAe1P,EAAU2P,SAASJ,EAAYnX,KAAKlC,SACnDQ,QAAQC,IAAI+Y,GACa,YAAtBA,EAAa5Z,OACd4Z,EAAerJ,GAAYsJ,SAASJ,EAAYnX,KAAKlC,UACxCwR,iBAAiB6H,EAAYnX,KAAKjC,eAAe,IAGxB,YAAlCoZ,EAAYnX,KAAKlC,QAAQJ,MAC/BY,QAAQC,IAAI,mDACZ+Y,EAAerJ,GAAYsJ,SAASJ,EAAYnX,KAAKlC,UACxCwR,iBAAiB6H,EAAYnX,KAAKjC,eAAe,IAErB,gBAAlCoZ,EAAYnX,KAAKlC,QAAQJ,MAChCY,QAAQC,IAAI,sCACZ+Y,EAAerJ,GAAYsJ,SAASJ,EAAYnX,KAAKlC,UACxCwR,iBAAiB6H,EAAYnX,KAAKjC,eAAe,IAEtB,aAAlCoZ,EAAYnX,KAAKlC,QAAQJ,MAC/B4Z,EAAa5Z,KAAO,WACpB4Z,EAAahX,SAAW6W,EAAYnX,KAAKlC,QAAQwC,UAET,aAAlC6W,EAAYnX,KAAKlC,QAAQJ,MAC/B4Z,EAAa5Z,KAAO,WACpB4Z,EAAahX,SAAW6W,EAAYnX,KAAKlC,QAAQwC,UAGjDhC,QAAQsC,MAAM,2CAGhBuW,EAAYnX,KAAKlC,QAAUwZ,EAE7B,OAAOH,EACP,MAAO/F,GAEP,YADA9S,QAAQsC,MAAMwQ,IF/BGoG,IACrBlZ,QAAQC,IAAI0Y,IAGZ5N,IAAM/B,YAKJgH,QAFqBzM,IAAnBoV,GAEMQ,aACNC,GACAT,GACAU,OAAOC,8BAAgCD,OAAOC,6BAA6B,CACzEC,OAAO,KAOHJ,aACNC,GACAC,OAAOC,8BAAgCD,OAAOC,6BAA6B,CACzEC,OAAO,KAKEvJ,oBAGfA,GAAMwJ,UACJC,MAAS,YEIc,SAAC7X,GACxB5B,QAAQC,IAAI,4BACZ,IACE,IAAM2Y,EAAkBE,KAAKY,UAAU9X,GACvCwV,aAAauC,QAAQ,QAASf,GAC9B,WFRAgB,CAAU,CACRlY,KAAMsO,GAAMC,WAAWvO,KACvBvC,KAAM6Q,GAAMC,WAAW9Q,SAExB,MAGL0a,iBACE,kBAAC,IAAD,CAAU7J,MAAOA,IACf,kBAAC,IAAD,CAAa8J,QAASC,MACpB,kBAAC,GAAD,QAGJC,SAASC,eAAe,U,mBGhE1BC,EAAOC,QAAU,IAA0B,qC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,kC,mBCA3CD,EAAOC,QAAU,IAA0B,oC","file":"static/js/main.07dadf2c.chunk.js","sourcesContent":["import React, { Fragment } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport FsLightbox from 'fslightbox-react';\n\nimport { setLBSlide, toggleLBVisible } from \"./../../../actions\";\n\nlet dispatch;\n\nvar showSlide = slide => {\n  dispatch(toggleLBVisible());\n  dispatch(setLBSlide(slide));\n};\n\nconst TweetMedia = props => {\n  let quote = props.quote;\n\n  let curGame = useSelector(state => state.game.curGame);\n  let curTweet = null;\n  if (curGame !== undefined) {\n    curTweet = curGame.curTweet;\n  }\n\n  let curSlide = useSelector(state => state.lightbox.slide);\n  let lbVisible = useSelector(state => state.lightbox.isVisible);\n\n  dispatch = useDispatch();\n  let tweetWithMedia = null;\n\n  //check if tweet with media we are rendering is quote or orginial\n\n  if (quote === true) {\n    tweetWithMedia = curTweet.quote;\n  } else {\n    tweetWithMedia = curTweet;\n  }\n  let content = null;\n\n  let numMedia = 0;\n\n  let mediaURLs = [];\n  let imgAr = [];\n  if (tweetWithMedia !== null) {\n    if (tweetWithMedia.hasMedia) {\n      const mediaAr = tweetWithMedia.media;\n      console.log(mediaAr);\n      numMedia = mediaAr.length;\n      //we have some media to render!\n      for (let i = 0; i < mediaAr.length; i++) {\n        let media = mediaAr[i];\n        mediaURLs.push(media.url);\n        if (media.type === \"photo\" || media.type === \"animated_gif\") {\n          imgAr.push(\n            <img key={i} src={media.url} alt=\"\" className={\"tweet-media-item tweet-media-item-\" + i} onClick={() => showSlide(i)}></img>\n          );\n        } else if (media.type === \"video\") {\n          imgAr.push(\n            <video\n              width=\"426\"\n              height=\"240\"\n              controls\n              className=\"tweet-media-item fit\"\n              key={i}\n            >\n              <source src={media.url} type={media.format}></source>\n              Your browser does not support inline video viewing.\n            <a href={media.url}>Click here to view.</a>\n            </video>\n          );\n        } else {\n          console.error(\n            \"Media Type not caught in switch statement: \" + media.type\n          );\n        }\n      }\n      console.log(mediaURLs);\n      content = (\n        <div className={\"tweet-media-grid-\" + numMedia}>\n          {imgAr}\n\n          <FsLightbox toggler={lbVisible} slide={curSlide} sources={mediaURLs} />\n        </div>\n      );\n      console.log(content);\n    } else {\n      content = null;\n    }\n  }\n  else {\n    content = null;\n  }\n\n  //return <div className={`tweet-media-${numMedia}`}>{content}</div>;\n  return <Fragment>{content}</Fragment>;\n};\n\nexport default TweetMedia;\n","//called upon logout\nexport const logoutAndReset = () => ({\n  type: 'RESET'\n})\n\n//action creator for updating the value of store.user.isAuthenticated\n//expects isAuthenticated to be boolean\nexport const updateAuthentication = isAuthenticated => ({\n  type: 'SET_AUTHENTICATION',\n  isAuthenticated\n})\n\n//action creator for updating the user object in store.user.userDetails\n//user expected to be object\nexport const updateUser = user => ({\n  type: 'SET_USER',\n  user\n})\n\n//action creator for updating the token string in store.user.userToken\n//expects token to be a string\nexport const updateToken = token => ({\n  type: 'SET_TOKEN',\n  token\n})\n\nexport const setDataAndInitGame = (curGame, parsedFriends, parsedTweets, lastTweetFetched) => ({\n  type: 'INIT_GAME',\n  curGame,\n  parsedFriends,\n  parsedTweets,\n  lastTweetFetchDate: Date.now(),\n  lastTweetFetched: lastTweetFetched\n})\n\n//action creator for setting the value of store.tweets.lastTweetFetched for timeline fetching management\n//expects lastFetched to be a string (id of tweet)\nexport const updateLastTweetFetched = lastFetched => ({\n  type: 'SET_LAST_TWEET_FETCHED',\n  lastFetched\n})\n\n//updates array of objects for store.tweets.parsedTweets\n//expects array of objects\nexport const updateParsedTweets = (parsedTweets, lastTweetFetched) => (\n  {\n  type: 'SET_PARSED_TWEETS',\n  parsedTweets: parsedTweets,\n  lastTweetFetchDate: Date.now(),\n  lastTweetFetched: lastTweetFetched\n})\n\nexport const updateCurGame = curGame => ({\n  type: 'SET_CURRENT_GAME',\n  curGame\n})\n\nexport const updateParsedFriends = parsedFriends => ({\n  type: 'SET_PARSED_FRIENDS',\n  parsedFriends\n})\n\nexport const toggleLBVisible = () => ({\n  type: 'TOGGLE_LB_VISIBLE',\n})\n\nexport const setLBSlide = (slideNum) => ({\n  type: 'SET_LB_SLIDE',\n  slideNum\n})\n\nexport const tweetIn = () => ({\n  type: 'TWEET_IN_TRUE'\n})\n\nexport const tweetOut = () => ({\n  type: 'TWEET_IN_FALSE'\n})\n\nexport const optionsIn = () => ({\n  type: 'OPTIONS_IN_TRUE'\n})\n\nexport const optionsOut = () => ({\n  type: 'OPTIONS_IN_FALSE'\n})\n\nexport const toggleCompleteIn = () => ({\n  type: 'TOGGLE_COMPLETE_IN'\n})","import React, { Fragment } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { useSelector } from \"react-redux\";\n\nconst AuthorBlank = () => {\n    console.log('rendering blank');\n    const [{ canDrop, isOver, authorBeingDragged }, drop] = useDrop({\n        accept: \"author\",\n        hover: (item, monitor) => {\n            console.log(monitor);\n        },\n        collect: monitor => ({\n            isOver: monitor.isOver(),\n            canDrop: monitor.canDrop(),\n            authorBeingDragged: monitor.getItem()\n        })\n    });\n\n    const isActive = canDrop && isOver;\n    let backgroundColor = \"transparent\";\n    let color = 'black';\n    let width = '150px';\n\n    let blankName = null;\n    let blankHandle = null;\n\n    if (isActive) {\n      backgroundColor = \"transparent\";\n      color = 'black';\n      blankName = authorBeingDragged.author.name;\n      blankHandle = \"@\" + authorBeingDragged.author.handle;\n      width = 'min-content';\n    } else if (canDrop) {\n      backgroundColor = \"#BF0404\";\n      color = backgroundColor;\n      blankName = authorBeingDragged.author.name;\n      blankHandle = \"@\" + authorBeingDragged.author.handle;\n      width = 'min-content';\n    }\n\n    return  (\n        <div ref={drop} className=\"author-blank\" >\n            <h3>&#8213;</h3><h3 className={\"author-blank-empty\"} style={{backgroundColor, color, width}}> {blankName} <span className={\"tweet-info-details\"}> {blankHandle}</span></h3>\n        </div>\n    )\n}\n\nexport default AuthorBlank;","import React, { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport Typing from 'react-typing-animation';\nimport TweetProfilePic from \"./../TweetProfilePic\";\nimport AuthorBlank from \"./AuthorBlank\";\n\nimport Typist from 'react-typist';\n\n\nconst TweetText = props => {\n\tconst game = useSelector(state => state.game.curGame);\n\tif (game !== null) {\n\t\tlet curTweet = game.curTweet;\n\n\t\t//reset used indexes for every new tweet\n\t\t//usedIdx = [];\n\n\t\tlet quote = props.quote;\n\t\tlet textToRender;\n\t\tlet urlsToRender = [];\n\t\tlet tweetToRender;\n\t\tlet classForTweetInfo;\n\t\t//check if we need to render quote tweet info or no\n\t\tif (quote === true) {\n\t\t\ttweetToRender = curTweet.quoteTweet;\n\t\t\tclassForTweetInfo = \"quote-tweet-info\";\n\t\t}\n\t\telse {\n\t\t\ttweetToRender = curTweet;\n\t\t\tclassForTweetInfo = \"tweet-info\"\n\t\t}\n\t\tlet infoContent = null;\n\t\tlet header = null;\n\t\tif (tweetToRender !== null) {\n\t\t\tinfoContent = (\n\t\t\t\t<div className=\"info\">\n\t\t\t\t\t<h3 className={classForTweetInfo + \"-name\"}>&#8213; {tweetToRender.user.name} <span className={classForTweetInfo + \"-details\"}> @{tweetToRender.user.handle}</span></h3>\n\t\t\t\t</div>\n\t\t\t)\n\t\t}\n\t\telse {\n\t\t\tconsole.error('no tweetToRender in TweetText')\n\t\t}\n\n\t\t//no need to extract words if it's a quote tweet\n\t\tif (quote === true) {\n\t\t\ttextToRender = curTweet.quoteTweet.text;\n\t\t\tif (curTweet.quoteTweet.urls !== null) {\n\t\t\t\tfor (let i = 0; i < curTweet.quoteTweet.urls.length; i++) {\n\t\t\t\t\turlsToRender.push(\n\t\t\t\t\t\t<a target=\"_blank\" href={curTweet.quoteTweet.urls[i].expanded_url} rel=\"noopener noreferrer\" key={i}>\n\t\t\t\t\t\t\t&#x2197; {curTweet.quoteTweet.urls[i].display_url}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//extract words and such if its a fillblank game\n\t\telse if (game.type === 'FillBlank') {\n\t\t\theader = <h2 className=\"section-title\">Complete the Tweet:</h2>\n\t\t\ttextToRender = game.textToRender;\n\t\t\tconsole.log(textToRender);\n\t\t\tif (curTweet.urls !== null) {\n\t\t\t\tfor (let i = 0; i < curTweet.urls.length; i++) {\n\t\t\t\t\turlsToRender.push(\n\t\t\t\t\t\t<a target=\"_blank\" href={curTweet.urls[i].expanded_url} rel=\"noopener noreferrer\" key={i}>\n\t\t\t\t\t\t\t&#x2197; {curTweet.urls[i].display_url}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t//no need to extract words if game is guess author\n\t\telse if (game.type === 'GuessAuthor') {\n\t\t\tinfoContent = <AuthorBlank />;\n\t\t\theader = <h2 className=\"section-title\">Guess the Author:</h2>\n\t\t\ttextToRender = curTweet.text;\n\t\t\turlsToRender = null;\n\t\t\t// if (curTweet.urls !== null) {\n\t\t\t// \tfor (let i = 0; i < curTweet.urls.length; i++) {\n\t\t\t// \t\turlsToRender.push(\n\t\t\t// \t\t\t<a target=\"_blank\" href={curTweet.urls[i].expanded_url} rel=\"noopener noreferrer\" key={i}>\n\t\t\t// \t\t\t\t&#x2197; {curTweet.urls[i].display_url}\n\t\t\t// \t\t\t</a>\n\t\t\t// \t\t);\n\t\t\t// \t}\n\t\t\t// }\n\t\t}\n\t\telse if (game.type === \"Complete\" || game.type === 'NoTweets') {\n\t\t\ttextToRender = curTweet.text;\n\t\t\tif (curTweet.urls !== null) {\n\t\t\t\tfor (let i = 0; i < curTweet.urls.length; i++) {\n\t\t\t\t\turlsToRender.push(\n\t\t\t\t\t\t<a target=\"_blank\" href={curTweet.urls[i].expanded_url} rel=\"noopener noreferrer\" key={i}>\n\t\t\t\t\t\t\t&#x2197; {curTweet.urls[i].display_url}\n\t\t\t\t\t\t</a>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tconsole.error('Game type not recognized in TweetText');\n\t\t}\n\n\t\tlet tweetDate = new Date(tweetToRender.date)\n\n\t\treturn (\n\t\t\t<Fragment>\n\t\t\t\t{game.type === 'FillBlank' || game.type === 'GuessAuthor' && quote !== true ?\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t{header}\n\t\t\t\t\t\t<h4 className=\"bold\">Recieved at {tweetDate.toLocaleTimeString('en-US')} {tweetDate.toLocaleDateString('en-US')}</h4>\n\t\t\t\t\t\t<pre className=\"tweet-text\">{textToRender}</pre>\n\t\t\t\t\t\t{infoContent}\n\t\t\t\t\t\t<div className=\"tweet-urls\">{urlsToRender}</div>\n\t\t\t\t\t</Fragment>\n\n\t\t\t\t\t:\n\n\t\t\t\t\t<Fragment>\n\t\t\t\t\t\t<h4 className=\"bold\">Recieved at {tweetDate.toLocaleTimeString('en-US')} {tweetDate.toLocaleDateString('en-US')}</h4>\n\t\t\t\t\t\t<pre className=\"tweet-text\">{textToRender}</pre>\n\t\t\t\t\t\t{infoContent}\n\t\t\t\t\t\t<div className=\"tweet-urls\">{urlsToRender}</div>\n\t\t\t\t\t</Fragment>\n\t\t\t\t}\n\t\t\t</Fragment>\n\t\t);\n\t}\n\telse return null;\n};\n\nexport default TweetText;\n","import React from 'react'\nimport { useSelector } from \"react-redux\";\nimport TweetText from './../TweetText';\nimport TweetMedia from '../TweetMedia';\n\nconst QuoteTweet = () => {\n    let quoteTweet = useSelector(state => state.game.curGame.curTweet.quoteTweet);\n\n    return(\n        <div className=\"quote-tweet-grid\">\n            <div className=\"quote-tweet-content\">\n                <TweetText quote={true} />\n                <TweetMedia />\n            </div>\n        </div>\n    )\n}\n\nexport default QuoteTweet","import React, { Fragment } from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport TweetText from \"./TweetText\";\nimport TweetMedia from \"./TweetMedia\";\nimport QuoteTweet from \"./QuoteTweet/QuoteTweet\";\n\nimport { CSSTransition } from 'react-transition-group';\nimport { tweetIn, optionsIn } from '../../../actions';\n\nimport printFile from './../../../sound/print.mp3';\n\n\nlet printSound = new Audio(printFile);\n\nconst TweetContent = () => {\n\n    console.log('rendering content');\n\n    const enterTransition = () => {\n        dispatch(tweetIn());\n    }\n\n    const showOptions = () => {\n        dispatch(optionsIn());\n        printSound.pause();\n    }\n\n    \n    const playSound = () => {\n        printSound.play();\n    }\n\n    let curGame = useSelector(state => state.game.curGame);\n\n    let animateToggle = useSelector(state => state.ui.tweetIn);\n\n    let dispatch = useDispatch();\n\n    let curTweet = null;\n    if (curGame !== null) {\n        curTweet = curGame.curTweet;\n        if(curGame.type === 'Complete') {\n            if(curGame.status === 'Fail') {\n                showOptions();\n                return null;\n            }\n        }\n    }\n\n    let content = null;\n\n    let animation = 'slide-up';\n    let animationDur = 1000;\n\n    if (animateToggle === false) {\n        animationDur = 200;\n    }\n\n    //make sure we have content to render\n    if (curTweet !== null) {\n        if(curGame.type === 'Complete') {\n            animation = 'fade';\n        }\n        else if(curGame.type === 'NoTweets') {\n            return null;\n        }\n\n        //check if we need to render a quote tweet\n        if (curTweet.isQuote === true) {\n            content = (\n                <Fragment>\n                    <TweetText />\n                    <TweetMedia quote={false} />\n                    <QuoteTweet />\n                </Fragment>\n            )\n        }\n        else {\n            content = (\n                <Fragment>\n                    <TweetText />\n                    <TweetMedia quote={false} />\n                </Fragment>\n            )\n        }\n    }\n\n   \n\n    return (\n        <CSSTransition\n            in={animateToggle}\n            classNames={animation}\n            appear={true}\n            timeout={animationDur}\n            onExited={()=> enterTransition()}\n            onEntering={() => playSound()}\n            onEntered={() => showOptions()}\n        >\n            <div className=\"tweet-content-wrapper torn\">\n                <div className=\"tweet-content\">\n                    {content}\n                </div>\n            </div>\n        </CSSTransition>\n    )\n}\n\nexport default TweetContent","import React, { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport TweetContent from \"./TweetContent/TweetContent\";\nimport \"./TweetCard.css\";\n\n\n\n\nconst TweetCard = () => {\n  //hook into state to get the current tweet to display\n  let game = useSelector(state => state.game.curGame);\n  let content;\n\n  let gridOrder = '';\n  let gridSpan = '';\n\n  if (game !== null) {\n    let curTweet = game.curTweet;\n\n    //make sure we have content to render\n    if (curTweet !== null) {\n      //render the info and everything if its FillBlank\n      if (game.type === 'FillBlank') {\n        content = (\n          <Fragment>\n            <TweetContent />\n          </Fragment>\n        );\n      }\n      //put in blank instead of info\n      else if (game.type === 'GuessAuthor') {\n        content = (\n          <Fragment>\n            <TweetContent />\n          </Fragment>\n        )\n      }\n      else if (game.type === 'Complete' || game.type === 'NoTweets') {\n        content = (\n          <Fragment>\n            <TweetContent />\n          </Fragment>\n        );\n\n        gridOrder = 'second'\n        gridSpan = 'span-cols'\n      }\n      else {\n        console.error('Game type not caught in TweetCard');\n      }\n    }\n\n  }\n\n  //no tweets view\n  else {\n    content = null;\n  }\n\n  return (<div className={'tweet ' + gridOrder + \" \" + gridSpan}>{content}</div>);\n};\n\nexport default TweetCard;\n","let verbs = [\n  \"Accelerate\",\n  \"Accommodate\",\n  \"Accomplish\",\n  \"Accumulate\",\n  \"Achieve\",\n  \"Acquire\",\n  \"Act\",\n  \"Activate\",\n  \"Adapt\",\n  \"Add\",\n  \"Address\",\n  \"Adjust\",\n  \"Administer\",\n  \"Advertise\",\n  \"Advise\",\n  \"Advocate\",\n  \"Aid\",\n  \"Aide\",\n  \"Align\",\n  \"Allocate\",\n  \"Amend\",\n  \"Analyze\",\n  \"Answer\",\n  \"Anticipate\",\n  \"Apply\",\n  \"Appoint\",\n  \"Appraise\",\n  \"Approve\",\n  \"Arbitrate\",\n  \"Arrange\",\n  \"Articulate\",\n  \"Ascertain\",\n  \"Assemble\",\n  \"Assess\",\n  \"Assign\",\n  \"Assist\",\n  \"Assume\",\n  \"Attain\",\n  \"Attend\",\n  \"Attract\",\n  \"Audit\",\n  \"Augment\",\n  \"Author\",\n  \"Authorize\",\n  \"Automate\",\n  \"Avert\",\n  \"Award\",\n  \"Bargain\",\n  \"Begin\",\n  \"Bolster\",\n  \"Boost\",\n  \"Bought\",\n  \"Brief\",\n  \"Broaden\",\n  \"Budget\",\n  \"Build\",\n  \"Built\",\n  \"Calculate\",\n  \"Calibrate\",\n  \"Canvass\",\n  \"Capture\",\n  \"Care\",\n  \"Catalog\",\n  \"Catalogue\",\n  \"Categorize\",\n  \"Cater\",\n  \"Cause\",\n  \"Centralize\",\n  \"Chair\",\n  \"Charge\",\n  \"Chart\",\n  \"Check\",\n  \"Check in\",\n  \"Check out\",\n  \"Clarify\",\n  \"Classify\",\n  \"Co-operate\",\n  \"Coach\",\n  \"Code\",\n  \"Collaborate\",\n  \"Collate\",\n  \"Collect\",\n  \"Combine\",\n  \"Comfort\",\n  \"Commence\",\n  \"Communicate\",\n  \"Compare\",\n  \"Compile\",\n  \"Complete\",\n  \"Compose\",\n  \"Compute\",\n  \"Conceive\",\n  \"Conceptualize\",\n  \"Conciliate\",\n  \"Conclude\",\n  \"Condense\",\n  \"Conduct\",\n  \"Confer\",\n  \"Confirm\",\n  \"Connect\",\n  \"Conserve\",\n  \"Consider\",\n  \"Consolidate\",\n  \"Construct\",\n  \"Consult\",\n  \"Contact\",\n  \"Contract\",\n  \"Contribute\",\n  \"Control\",\n  \"Convert\",\n  \"Convey\",\n  \"Convince\",\n  \"Cooperate\",\n  \"Coordinate\",\n  \"Copy\",\n  \"Correct\",\n  \"Correlate\",\n  \"Correspond\",\n  \"Counsel\",\n  \"Create\",\n  \"Critique\",\n  \"Cultivate\",\n  \"Customize\",\n  \"Debate\",\n  \"Debug\",\n  \"Decide\",\n  \"Decrease\",\n  \"Dedicate\",\n  \"Deduce\",\n  \"Defend\",\n  \"Defer\",\n  \"Define\",\n  \"Delegate\",\n  \"Deliver\",\n  \"Demonstrate\",\n  \"Depict\",\n  \"Depreciated\",\n  \"Derive\",\n  \"Describe\",\n  \"Design\",\n  \"Detail\",\n  \"Detect\",\n  \"Determine\",\n  \"Develop\",\n  \"Devise\",\n  \"Devote\",\n  \"Diagnose\",\n  \"Diagram\",\n  \"Differentiate\",\n  \"Direct\",\n  \"Discharge\",\n  \"Disclose\",\n  \"Discover\",\n  \"Discriminate\",\n  \"Discuss\",\n  \"Dispatch\",\n  \"Display\",\n  \"Dissect\",\n  \"Disseminate\",\n  \"Distinguish\",\n  \"Distribute\",\n  \"Diversify\",\n  \"Document\",\n  \"Draft\",\n  \"Draw\",\n  \"Drew\",\n  \"Earn\",\n  \"Edit\",\n  \"Educate\",\n  \"Effect\",\n  \"Elect\",\n  \"Elicit\",\n  \"Eliminate\",\n  \"Emphasize\",\n  \"Employ\",\n  \"Enable\",\n  \"Encourage\",\n  \"Enforce\",\n  \"Engineer\",\n  \"Enhance\",\n  \"Enlarge\",\n  \"Enlighten\",\n  \"Enlist\",\n  \"Enrich\",\n  \"Ensure\",\n  \"Enter\",\n  \"Entertain\",\n  \"Enumerate\",\n  \"Equip\",\n  \"Establish\",\n  \"Estimate\",\n  \"Evaluate\",\n  \"Examine\",\n  \"Exchange\",\n  \"Execute\",\n  \"Exercise\",\n  \"Exhibit\",\n  \"Expand\",\n  \"Expedite\",\n  \"Experiment\",\n  \"Explain\",\n  \"Explore\",\n  \"Express\",\n  \"Extend\",\n  \"Extract\",\n  \"Extrapolate\",\n  \"Fabricate\",\n  \"Facilitate\",\n  \"Familiarize\",\n  \"Fashion\",\n  \"File\",\n  \"Filter\",\n  \"Finalize\",\n  \"Fine-tune\",\n  \"Fix\",\n  \"Focus\",\n  \"Forecast\",\n  \"Formulate\",\n  \"Fortify\",\n  \"Forward\",\n  \"Foster\",\n  \"Found\",\n  \"Frame\",\n  \"Fund\",\n  \"Furnish\",\n  \"Further\",\n  \"Gather\",\n  \"Gauge\",\n  \"Generate\",\n  \"Govern\",\n  \"Grade\",\n  \"Grant\",\n  \"Greet\",\n  \"Guide\",\n  \"Handle\",\n  \"Head\",\n  \"Help\",\n  \"Highlight\",\n  \"Hire\",\n  \"Host\",\n  \"Identify\",\n  \"Illustrate\",\n  \"Impart\",\n  \"Implement\",\n  \"Import\",\n  \"Improve\",\n  \"Improvise\",\n  \"Incorporate\",\n  \"Increase\",\n  \"Index\",\n  \"Individualize\",\n  \"Influence\",\n  \"Inform\",\n  \"Initiate\",\n  \"Innovate\",\n  \"Inspect\",\n  \"Inspire\",\n  \"Install\",\n  \"Institute\",\n  \"Instruct\",\n  \"Insure\",\n  \"Integrate\",\n  \"Interact\",\n  \"Interface\",\n  \"Interpret\",\n  \"Intervene\",\n  \"Interview\",\n  \"Introduce\",\n  \"Invent\",\n  \"Inventory\",\n  \"Investigate\",\n  \"Involve\",\n  \"Join\",\n  \"Judge\",\n  \"Justify\",\n  \"Label\",\n  \"Launch\",\n  \"Lead\",\n  \"Learn\",\n  \"Lecture\",\n  \"License\",\n  \"Lighten\",\n  \"Liquidate\",\n  \"List\",\n  \"Listen\",\n  \"Litigate\",\n  \"Lobby\",\n  \"Localize\",\n  \"Locate\",\n  \"Log\",\n  \"Maintain\",\n  \"Manage\",\n  \"Manufacture\",\n  \"Map\",\n  \"Market\",\n  \"Master\",\n  \"Maximize\",\n  \"Measure\",\n  \"Mechanize\",\n  \"Mediate\",\n  \"Mentor\",\n  \"Merge\",\n  \"Methodize\",\n  \"Minimize\",\n  \"Mobilize\",\n  \"Model\",\n  \"Moderate\",\n  \"Modernize\",\n  \"Modify\",\n  \"Monitor\",\n  \"Motivate\",\n  \"Narrate\",\n  \"Navigate\",\n  \"Negotiate\",\n  \"Notify\",\n  \"Nurse\",\n  \"Nurture\",\n  \"Observe\",\n  \"Obtain\",\n  \"Officiate\",\n  \"Offset\",\n  \"Operate\",\n  \"Orchestrate\",\n  \"Order\",\n  \"Organize\",\n  \"Orient\",\n  \"Orientate\",\n  \"Originate\",\n  \"Outline\",\n  \"Overhaul\",\n  \"Oversaw\",\n  \"Oversee\",\n  \"Package\",\n  \"Participate\",\n  \"Perceive\",\n  \"Perfect\",\n  \"Perform\",\n  \"Persuade\",\n  \"Photograph\",\n  \"Pilot\",\n  \"Pioneer\",\n  \"Plan\",\n  \"Practice\",\n  \"Predict\",\n  \"Prepare\",\n  \"Present\",\n  \"Preserve\",\n  \"Preside\",\n  \"Prevent\",\n  \"Print\",\n  \"Prioritize\",\n  \"Probe\",\n  \"Process\",\n  \"Produce\",\n  \"Program\",\n  \"Project\",\n  \"Promote\",\n  \"Propose\",\n  \"Provide\",\n  \"Publicize\",\n  \"Publish\",\n  \"Purchase\",\n  \"Qualify\",\n  \"Quantify\",\n  \"Quote\",\n  \"Raise\",\n  \"Ran\",\n  \"Rank\",\n  \"Rate\",\n  \"Read\",\n  \"Reason\",\n  \"Recall\",\n  \"Recognize\",\n  \"Recommend\",\n  \"Reconcile\",\n  \"Record\",\n  \"Recreate\",\n  \"Recruit\",\n  \"Rectify\",\n  \"Reduce\",\n  \"Refer\",\n  \"Refine\",\n  \"Register\",\n  \"Regulate\",\n  \"Rehabilitate\",\n  \"Reinforce\",\n  \"Relate\",\n  \"Related\",\n  \"Release\",\n  \"Remodel\",\n  \"Render\",\n  \"Renew\",\n  \"Reorganize\",\n  \"Repair\",\n  \"Replace\",\n  \"Report\",\n  \"Represent\",\n  \"Research\",\n  \"Reserve\",\n  \"Resolve\",\n  \"Respond\",\n  \"Restore\",\n  \"Restrict\",\n  \"Retain\",\n  \"Retrieve\",\n  \"Revamp\",\n  \"Reveal\",\n  \"Review\",\n  \"Revise\",\n  \"Revitalize\",\n  \"Route\",\n  \"Sample\",\n  \"Save\",\n  \"Scan\",\n  \"Schedule\",\n  \"Screen\",\n  \"Script\",\n  \"Scrutinize\",\n  \"Search\",\n  \"Secure\",\n  \"Segment\",\n  \"Select\",\n  \"Serve\",\n  \"Service\",\n  \"Settle\",\n  \"Shape\",\n  \"Share\",\n  \"Show\",\n  \"Simplify\",\n  \"Simulate\",\n  \"Sketch\",\n  \"Sold\",\n  \"Solicit\",\n  \"Solve\",\n  \"Sort\",\n  \"Speak\",\n  \"Spearhead\",\n  \"Specialize\",\n  \"Specify\",\n  \"Spoke\",\n  \"Stage\",\n  \"Standardize\",\n  \"Start\",\n  \"Stimulate\",\n  \"Straighten\",\n  \"Strategize\",\n  \"Streamline\",\n  \"Strengthen\",\n  \"Structure\",\n  \"Study\",\n  \"Submit\",\n  \"Substantiate\",\n  \"Substitute\",\n  \"Suggest\",\n  \"Summarize\",\n  \"Supervise\",\n  \"Supply\",\n  \"Support\",\n  \"Surpass\",\n  \"Survey\",\n  \"Sustain\",\n  \"Symbolize\",\n  \"Synthesize\",\n  \"Systematize\",\n  \"Tabulate\",\n  \"Tail\",\n  \"Target\",\n  \"Taught\",\n  \"Teach\",\n  \"Tend\",\n  \"Terminate\",\n  \"Test\",\n  \"Theorize\",\n  \"Time\",\n  \"Tour\",\n  \"Trace\",\n  \"Track\",\n  \"Trade\",\n  \"Train\",\n  \"Transcribe\",\n  \"Transfer\",\n  \"Transform\",\n  \"Translate\",\n  \"Transmit\",\n  \"Transport\",\n  \"Transpose\",\n  \"Travel\",\n  \"Treat\",\n  \"Triple\",\n  \"Troubleshot\",\n  \"Tutor\",\n  \"Uncover\",\n  \"Undertook\",\n  \"Unify\",\n  \"Unveil\",\n  \"Update\",\n  \"Upgrade\",\n  \"Upheld\",\n  \"Use\",\n  \"Utilize\",\n  \"Validate\",\n  \"Value\",\n  \"Verify\",\n  \"View\",\n  \"Visit\",\n  \"Visualize\",\n  \"Vitalize\",\n  \"Volunteer\",\n  \"Weigh\",\n  \"Widen\",\n  \"Win\",\n  \"Withdraw\",\n  \"Witness\",\n  \"Write\",\n  \"Xerox\",\n  \"Zap\",\n  \"Zip\"\n];\n\nexport default verbs;\n","var posMap = {\n    JJ: 'adjective',\n    JJR: 'adjective',\n    JJS: 'adjective',\n    NN: 'noun',\n    NNS: 'nouns',\n    VB: 'verb',\n    VBD: 'verb',\n    VBG: 'verb',\n    VBN: 'verb',\n    VBP: 'verb',\n    VBZ: 'verb'\n}\n\nexport default posMap;","import React, { Fragment } from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { useSelector } from \"react-redux\";\n\nconst Blank = props => {\n\n  console.log('rendering blank');\n\n  let extractedWord = props.extractedWord;\n  let blankOrder = props.blankOrder;\n  let game = useSelector(state => state.game.curGame);\n\n  const [{ canDrop, isOver, wordBeingDragged }, drop] = useDrop({\n    accept: \"word\",\n    order: blankOrder,\n    drop: () => ({ name: extractedWord, order: blankOrder }),\n    collect: monitor => ({\n      isOver: monitor.isOver(),\n      canDrop: monitor.canDrop(),\n      wordBeingDragged: monitor.getItem()\n    })\n  });\n\n  let content = null;\n  let blankFiller = null;\n  let width = \"40px\";\n\n  const isActive = canDrop && isOver;\n  let backgroundColor = 'transparent';\n  let color = backgroundColor;\n  if (isActive) {\n    backgroundColor = \"transparent\";\n    color = \"black\";\n    //size all the blanks according to the word being dragged\n    blankFiller = wordBeingDragged.value;\n    width = 'min-content';\n  } else if (canDrop) {\n    backgroundColor = \"#BF0404\";\n    color = backgroundColor;\n    blankFiller = wordBeingDragged.value;\n    width = 'min-content';\n  }\n\n  let wordInBlank = null;\n\n  if (game !== null) {\n    let droppedWords = game.droppedWords;\n    for (let droppedWord of droppedWords) {\n      if (droppedWord.droppedIn === blankOrder) {\n        wordInBlank = droppedWord;\n      }\n    }\n  }\n\n  //render blank or filled in blank\n  if (wordInBlank !== null) {\n    content = (\n      <span\n        ref={drop}\n        className=\"tweet-blank-filled\"\n        style={{ backgroundColor: \"transparent\", color: \"black\" }}\n      >\n        {wordInBlank.word}\n      </span>\n    );\n  } else {\n    content = (\n      <span\n        ref={drop}\n        className=\"tweet-blank\"\n        style={{ backgroundColor, color, width }}\n      >\n        {blankFiller}\n      </span>\n    );\n  }\n\n  return <Fragment>{content}</Fragment>;\n};\n\nexport default Blank;\n","import React from \"react\";\nimport verbs from \"./../custom-dict/verbs\";\nimport posMap from \"./../config/pos\";\nimport Blank from \"../components/TweetCard/TweetContent/WordBlank\";\nimport { toast, Zoom } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport GameController from \"./GameController\";\n\nimport badFile from './../sound/bad.mp3'\nimport goodFile from './../sound/type.mp3';\nimport successFile from './../sound/success.mp3';\nimport failFile from './../sound/fail.mp3';\n\nlet badSound = new Audio(badFile);\nlet goodSound = new Audio(goodFile);\nlet successSound = new Audio(successFile);\nlet failSound = new Audio(failFile);\n\nvar pos = require(\"pos\");\nvar tagger = new pos.Tagger();\n\n//get sentencer reference for generating random words basd on pos\nvar Sentencer = require(\"sentencer\");\nSentencer.configure({\n\tactions: {\n\t\tverb: function () {\n\t\t\treturn verbs[Math.floor(Math.random() * (verbs.length - 1))];\n\t\t}\n\t}\n});\n\nexport default class FillBlank {\n\tconstructor(newTweet, foundWords) {\n\t\t//call constructor from super class Game\n\t\tthis.curTweet = newTweet;\n\t\tthis.type = 'FillBlank'\n\n\t\t//FillBlank specific properties\n\t\tthis.extractedWords = []; //array of extracted word objects\n\t\tthis.wordOptions = []; //array of word options objects\n\t\tthis.numBlanks = 0;\n\t\tthis.numDropped = 0; //intially equal to zero\n\t\tthis.droppedWords = []; // array of dropped words\n\t\tthis.lives = 3;\n\t\tthis.parent = new GameController();\n\t\tif (foundWords) {\n\t\t\tthis.foundWords = foundWords;\n\t\t\tthis.textToRender = this.extractWords();\n\t\t}\n\t\telse {\n\t\t\tthis.foundWords = null;\n\t\t\tthis.textToRender = this.findAndExtractWords();\n\t\t}\n\t}\n\n\tgetLives() {\n\t\treturn this.lives;\n\t}\n\n\n\tnewGame() {\n\t\tthis.parent.newGame();\n\t}\n\n\t//takes a drop and checks if it's true\n\thandleDrop(droppedWord, droppedIn, correctDrop) {\n\t\t//console.log(\"droppedWord: \" + droppedWord + \", droppedIn: \" + droppedIn);\n\n\t\tlet newWordObj = {\n\t\t\tword: droppedWord,\n\t\t\tdroppedIn: droppedIn\n\t\t};\n\n\t\tif (droppedIn === correctDrop) {\n\t\t\tnewWordObj.correct = true;\n\t\t}\n\t\t//incorrect drop, subtract life and return false\n\t\telse {\n\t\t\tnewWordObj.correct = false;\n\t\t\treturn this.incorrectDrop();\n\t\t}\n\n\n\n\t\t//check if we already dropped the word, move it if so and stop\n\t\tif (this.checkMovedWord(droppedWord)) {\n\t\t\tconsole.log(\"moved word\");\n\t\t\tfor (let i = 0; i < this.droppedWords.length; i++) {\n\t\t\t\tlet wordObj = this.droppedWords[i];\n\t\t\t\tconsole.log(wordObj);\n\t\t\t\tif (wordObj.word === newWordObj.word) {\n\t\t\t\t\tconsole.log(wordObj);\n\t\t\t\t\tthis.droppedWords[i] = newWordObj;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//check if already filled the blank, change the word if so\n\t\telse if (this.checkAlreadyDropped(droppedIn)) {\n\t\t\tconsole.log(\"already dropped\");\n\t\t\tfor (let i = 0; i < this.droppedWords.length; i++) {\n\t\t\t\tlet wordObj = this.droppedWords[i];\n\t\t\t\tif (wordObj.droppedIn === newWordObj.droppedIn) {\n\t\t\t\t\tthis.droppedWords[i] = newWordObj;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t//else add the word\n\t\telse {\n\t\t\tthis.droppedWords.push(newWordObj)\n\t\t}\n\n\t\treturn this.correctDrop();\n\n\t}\n\n\tcheckMovedWord(word) {\n\t\t//check to see if we have the word in our dropped word array\n\t\tfor (let wordObj of this.droppedWords) {\n\t\t\tif (wordObj.word === word) {\n\t\t\t\t//we already have the word\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t//new word\n\t\treturn false;\n\t}\n\n\t//checks to see if the blank is alrFieady filled\n\t//returns true with already dropped, so need to update word\n\t//or false and need to add word\n\tcheckAlreadyDropped(dropID) {\n\t\t//check to see if we already dropped a word in this spot\n\t\tfor (let wordObj of this.droppedWords) {\n\t\t\tif (wordObj.droppedIn === dropID) {\n\t\t\t\t//we already filled the blank\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t\t//blank is empty\n\t\treturn false\n\t}\n\n\n\n\t//handles a correct drop\n\tcorrectDrop() {\n\t\t//probably add word here\n\t\tgoodSound.play();\n\t\tlet done = this.checkDone();\n\t\tif(done) {\n\t\t\tthis.parent.updateGame(this);\n\t\t}\n\t\treturn true;\n\t}\n\n\t//handles an incorrect drop\n\tincorrectDrop() {\n\t\t//subtract life\n\t\tthis.lives = this.lives - 1;\n\t\tbadSound.play();\n\t\tif (this.lives === 0) {\n\t\t\tthis.fail();\n\t\t}\n\t\telse {\n\t\t\ttoast.error('Wrong! ' + this.lives + \" lives remaining.\", {\n\t\t\t\tposition: \"top-center\",\n\t\t\t\tautoClose: 2000,\n\t\t\t\tcloseButton: false,\n\t\t\t\tpauseOnHover: true,\n\t\t\t\tdraggable: false,\n\t\t\t\ttransition: Zoom,\n\t\t\t\thideProgressBar: true\n\t\t\t});\n\t\t\tthis.parent.updateGame(this);\n\t\t}\n\t}\n\n\t//checks if we have filled all the blanks\n\tcheckDone() {\n\t\t//finally check if we've finished completing the tweet\n\t\tconsole.log('checking to see if we completed the entire tweet');\n\t\tif (this.droppedWords.length === this.extractedWords.length) {\n\t\t\tthis.success();\n\t\t\treturn true;\n\t\t}\n\t\telse return false\n\t}\n\n\t//game is done and everything is correct\n\tasync success() {\n\t\t//get the next tweet\n\t\ttoast.success('Tweet completed correctly!', {\n\t\t\tposition: \"top-center\",\n\t\t\tautoClose: 2000,\n\t\t\tcloseButton: false,\n\t\t\tpauseOnHover: true,\n\t\t\tdraggable: false,\n\t\t\ttransition: Zoom,\n\t\t\thideProgressBar: true\n\t\t});\n\t\tsuccessSound.play();\n\t\tawait this.parent.animateOut();\n\t\tthis.type = 'Complete';\n\t\tthis.status = 'Success'\n\t\tthis.parent.updateGame(this);\n\t\treturn true;\n\t}\n\n\n\n\t//game is done and not everything is correct\n\tasync fail() {\n\t\t//display some sort of failure message\n\t\t//proceed to next tweet\n\t\ttoast.error('Game over, man. Game over.', {\n\t\t\tposition: \"top-center\",\n\t\t\tautoClose: 2000,\n\t\t\tcloseButton: false,\n\t\t\tpauseOnHover: true,\n\t\t\tdraggable: false,\n\t\t\ttransition: Zoom,\n\t\t\thideProgressBar: true\n\t\t});\n\t\tfailSound.play();\n\t\tawait this.parent.animateOut();\n\t\tthis.type = 'Complete';\n\t\tthis.status = 'Fail'\n\t\tthis.parent.updateGame(this);\n\t}\n\n\n\t//takes an array of extracted words (objects) and updates numExtracted words\n\tsetExtractedWords(extractedWords) {\n\t\tthis.extractedWords = extractedWords;\n\t\tthis.numBlanks = extractedWords.length;\n\t}\n\n\t//takes array of word options (objects)\n\tsetWordOptions(wordOptions) {\n\t\tthis.wordOptions = wordOptions;\n\t}\n\n\t//set the correct\n\tsetCorrect(correct) {\n\t\tthis.correct = correct;\n\t}\n\n\t//set the done property\n\tsetDone(done) {\n\t\tthis.done = done;\n\t}\n\n\tstatic fromJSON(serializedJson) {\n\t\tlet newInstance = new FillBlank(serializedJson.curTweet, serializedJson.foundWords);\n\n\t\tif (newInstance.type !== 'NoWords') {\n\t\t\tnewInstance.type = 'FillBlank'\n\t\t}\n\t\tnewInstance.extractedWords = serializedJson.extractedWords; //array of extracted word objects\n\t\tnewInstance.wordOptions = serializedJson.wordOptions; //array of word options objects\n\t\tnewInstance.numBlanks = serializedJson.numBlanks;\n\t\tnewInstance.numDropped = serializedJson.numDropped; //intially equal to zero\n\t\tnewInstance.droppedWords = serializedJson.droppedWords; // array of dropped words\n\t\tnewInstance.lives = serializedJson.lives;\n\t\tnewInstance.parent = new GameController();\n\n\t\treturn newInstance;\n\t}\n\n\tfindAndExtractWords() {\n\t\treturn this.getRandomWords();\n\t}\n\n\t//pick which words we will eventually extract\n\tgetRandomWords() {\n\t\t//get the text\n\t\tlet text = this.curTweet.text;\n\t\t//construct regex to split string into all words\n\t\tlet allWordExp =\n\t\t\t\"(?<!@)(?<=\\\\s|^|\\\\b)(?:[-’'%$#&\\\\/]\\\\b|\\\\b[-’'%$#&\\\\/]|[A-Za-z0-9]|\\\\([A-Za-z0-9]+\\\\))+(?=\\\\s|$|\\\\b)\";\n\t\tlet allWordReg = new RegExp(allWordExp, \"g\");\n\n\n\t\t//use regex to create array of all words in tweet\n\t\tlet wordAr = text.match(allWordReg);\n\n\t\t//some issue with getting words - maybe all emojis or excalamation or something else\n\t\tif (wordAr === null) {\n\t\t\t//log an error and just return the text to avoid crash\n\t\t\tthis.type = 'NoWords';\n\t\t\treturn null;\n\t\t}\n\t\t//declare array to hold all words we extract\n\t\tlet extractedWordArray = [];\n\n\t\tlet numCheckedWords = 0;\n\n\t\t//determine how many words to extract based on number of characters\n\t\tlet numChar = text.length;\n\t\tlet numWordsToExtract = 1;\n\t\tif (numChar <= 50) {\n\t\t\tnumWordsToExtract = 1;\n\t\t} else if (numChar > 50 && numChar <= 150) {\n\t\t\tnumWordsToExtract = 2;\n\t\t} else if (numChar > 150 && numChar <= 2500) {\n\t\t\tnumWordsToExtract = 3;\n\t\t} else {\n\t\t\tnumWordsToExtract = 4;\n\t\t}\n\n\t\tusedIdx = [];\n\t\t//get 2 random words\n\t\tfor (let i = 0; i < numWordsToExtract; i++) {\n\t\t\t//get a random index and get the word at that index\n\t\t\tlet randIdx = getRandomUniqueIndex(wordAr.length - 1);\n\t\t\tlet extractedWord = wordAr[randIdx];\n\n\t\t\twhile (\n\t\t\t\tcheckValidWord(extractedWord, extractedWordArray) === false &&\n\t\t\t\tnumCheckedWords < wordAr.length - 1\n\t\t\t) {\n\t\t\t\trandIdx = getRandomUniqueIndex(wordAr.length - 1);\n\t\t\t\textractedWord = wordAr[randIdx];\n\t\t\t\tnumCheckedWords++;\n\t\t\t}\n\n\n\t\t\tif (numCheckedWords === wordAr.length - 1) {\n\t\t\t\tconsole.log(\"checked all the words\");\n\t\t\t\t//can't do FIB so resort to GuessAuthor\n\t\t\t\tthis.type = 'NoWords';\n\t\t\t\treturn null;\n\t\t\t} else {\n\t\t\t\tlet wordLex = new pos.Lexer().lex(extractedWord);\n\t\t\t\tlet taggedWord = tagger.tag(wordLex);\n\t\t\t\tlet wordPos = taggedWord[0][1];\n\n\t\t\t\tlet mappedPos = posMap[wordPos];\n\n\t\t\t\textractedWordArray.push({\n\t\t\t\t\tword: extractedWord,\n\t\t\t\t\tmappedPOS: mappedPos\n\t\t\t\t});\n\t\t\t}\n\n\t\t}\n\n\t\t//we picked out words, next up: find them\n\t\treturn this.findWordsInText(extractedWordArray);\n\n\n\t}\n\n\t//take the words we want to find and then....find them in the text\n\tfindWordsInText(extractedWordArray) {\n\t\t//get the text\n\t\tlet text = this.curTweet.text;\n\t\t//declare array to keep track of words as we find them in the tweet\n\t\tlet foundWordArray = [];\n\n\t\tfor (let word of extractedWordArray) {\n\t\t\t//construct regex to search for the current word\n\t\t\tvar searchExtractedWord = `\\\\b${word.word}\\\\b`;\n\t\t\tvar regSearchExtractedWord = new RegExp(searchExtractedWord);\n\n\t\t\t//determine the indices of beginning and end of word\n\t\t\tlet startIdx = text.search(regSearchExtractedWord);\n\t\t\tlet endIdx = startIdx + word.word.length - 1;\n\n\t\t\t//push an object containing the found indices and the word itself\n\t\t\tfoundWordArray.push({\n\t\t\t\tword: word.word,\n\t\t\t\tstart: startIdx,\n\t\t\t\tend: endIdx,\n\t\t\t\tpos: word.mappedPOS\n\t\t\t});\n\t\t}\n\n\t\t//sort the array so that smallest idx is first\n\t\tfoundWordArray.sort((a, b) => (a.start > b.start ? 1 : -1));\n\n\t\t//set property incase we need to re-extract later\n\t\tconsole.log('setting foundWords')\n\t\tthis.foundWords = foundWordArray;\n\n\t\t//we have a sorted array of words we want to extract and their start/end indexes\n\t\treturn this.extractWords()\n\t}\n\n\textractWords() {\n\t\tconsole.log('extractingWords');\n\t\t//get the text\n\t\tlet text = this.curTweet.text;\n\t\tlet foundWordArray = this.foundWords;\n\n\t\tlet extractWordObjs = [];\n\n\t\t//loop through sorted found words and extract accordingly\n\t\tfor (let i = 0; i < foundWordArray.length; i++) {\n\t\t\tlet foundWord = foundWordArray[i];\n\t\t\textractWordObjs.push({\n\t\t\t\tword: foundWord.word,\n\t\t\t\torder: i,\n\t\t\t\tpos: foundWord.pos\n\t\t\t});\n\n\t\t\tvar searchFoundWord = `(\\\\b${foundWord.word})`;\n\t\t\tvar foundWordRegex = new RegExp(searchFoundWord);\n\n\t\t\t//replace the word with a blank placeholder\n\t\t\ttext = text.replace(foundWordRegex, \"*!*!%[need a blank here plzz]*!*!%\");\n\t\t\t//console.log(\"text after replace:\" + text);\n\t\t}\n\n\t\t//split text into array at seperators\n\t\tlet parts = text.split(\"*!*!%\");\n\n\t\t//array to hold all the jsx\n\t\tlet jsxAr = [];\n\n\t\t//iterator to keep track of what word we're replacing\n\t\tlet curWordIdx = 0;\n\n\t\tlet startIdx;\n\t\tif(parts[0] == '') {\n\t\t\tstartIdx = 1;\n\t\t}\n\t\telse {\n\t\t\tstartIdx = 0;\n\t\t}\n\n\t\tfor (let i = startIdx; i < parts.length; i++) {\n\t\t\t//insert fill in the blank compenent in at placeholder\n\t\t\tif (parts[i] === \"[need a blank here plzz]\") {\n\t\t\t\tjsxAr.push(\n\t\t\t\t\t<Blank\n\t\t\t\t\t\tkey={i}\n\t\t\t\t\t\textractedWord={extractWordObjs[curWordIdx].word}\n\t\t\t\t\t\tblankOrder={extractWordObjs[curWordIdx].order}\n\t\t\t\t\t/>\n\t\t\t\t);\n\t\t\t\t//increment curWordIdx iterator\n\t\t\t\tcurWordIdx++;\n\t\t\t}\n\t\t\t//or just put the text\n\t\t\telse {\n\t\t\t\tjsxAr.push(<span key={i}>{parts[i]}</span>);\n\t\t\t}\n\t\t}\n\n\t\tif (jsxAr.length < 2) {\n\t\t\tthis.parent.newGuessAuthor(this.curTweet);\n\t\t\treturn null;\n\t\t}\n\n\t\t//one correct word and three matching random incorrect words\n\t\tlet wordOptions = [];\n\t\tfor (let word of extractWordObjs) {\n\t\t\twordOptions.push({\n\t\t\t\tword: word.word,\n\t\t\t\torder: word.order\n\t\t\t});\n\t\t\tfor (let i = 0; i < 3; i++) {\n\t\t\t\tlet randWord = Sentencer.make(`{{ ${word.pos} }}`);\n\t\t\t\tlet normedWord = normalizeCap(word.word, randWord);\n\t\t\t\twordOptions.push({\n\t\t\t\t\tword: normedWord,\n\t\t\t\t\torder: -1\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\n\n\t\tthis.setWordOptions(wordOptions);\n\t\tthis.setExtractedWords(extractWordObjs);\n\n\t\tconsole.log(jsxAr);\n\n\t\treturn jsxAr;\n\t}\n}\n\n//function that transforms the randomly generated word to match the case of the correct choice it corresponds to\nvar normalizeCap = (modelWord, normWord) => {\n\n\tlet character = '';\n\tlet i = 0;\n\tlet allCaps = true;\n\tlet normedChars = [];\n\twhile (i < modelWord.length) {\n\t\tcharacter = modelWord.charAt(i);\n\n\t\tif (!isNaN(character * 1)) {\n\t\t\talert('character is numeric');\n\t\t} else {\n\t\t\tif (character === character.toUpperCase()) {\n\t\t\t\t//character is uppercase\n\t\t\t\t//need to make sure normWord is not shorter than modelWord\n\t\t\t\tif (normWord[i]) {\n\t\t\t\t\tnormedChars[i] = normWord[i].toUpperCase();\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (character === character.toLowerCase()) {\n\t\t\t\t//character is lowercase\n\t\t\t\tallCaps = false;\n\t\t\t\tif (normWord[i]) {\n\t\t\t\t\tnormedChars[i] = normWord[i].toLowerCase();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ti++;\n\t}\n\t//capitalize the rest of normWord if the model word is all caps\n\tif (allCaps === true) {\n\t\twhile (i < normWord.length) {\n\t\t\tnormedChars[i] = normWord[i].toUpperCase();\n\t\t\ti++;\n\t\t}\n\t}\n\telse {\n\t\twhile (i < normWord.length) {\n\t\t\tnormedChars[i] = normWord[i];\n\t\t\ti++;\n\t\t}\n\t}\n\n\treturn normedChars.join('');\n}\n\n//private function to get a random index from the text word array\nlet usedIdx = [];\n\nvar getRandomUniqueIndex = max => {\n\t//console.log(\"usedIdx: \" + usedIdx);\n\tlet newIdx = Math.floor(Math.random() * Math.floor(max));\n\twhile (usedIdx.includes(newIdx) && usedIdx.length < max) {\n\t\tnewIdx = Math.floor(Math.random() * Math.floor(max));\n\t}\n\tusedIdx.push(newIdx);\n\treturn newIdx;\n};\n\n//private function to make sure the word is good\nvar checkValidWord = (word, extractedWordArray) => {\n\t//need word to be at least 2 characters\n\tif (word.length < 3) {\n\t\treturn false;\n\t}\n\t//don't get the same word twice\n\tif (extractedWordArray.includes(word)) {\n\t\treturn false;\n\t}\n\t//only want nouns, adj, and verbs\n\tlet wordLex = new pos.Lexer().lex(word);\n\tlet taggedWord = tagger.tag(wordLex);\n\tlet wordPos = taggedWord[0][1];\n\tif (\n\t\twordPos !== \"NN\" &&\n\t\twordPos !== \"NNS\" &&\n\t\twordPos !== \"JJ\" &&\n\t\twordPos !== \"JJR\" &&\n\t\twordPos !== \"JJS\" &&\n\t\twordPos !== \"VB\" &&\n\t\twordPos !== \"VBN\" &&\n\t\twordPos !== \"VBD\" &&\n\t\twordPos !== \"VBG\" &&\n\t\twordPos !== \"VBP\" &&\n\t\twordPos !== \"VBZ\"\n\t) {\n\t\treturn false;\n\t}\n\treturn true;\n};\n","import React from 'react'\nimport GameController from './../classes/GameController';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { tweetOut, optionsOut, optionsIn, tweetIn } from '../actions';\n\nimport clickFile from './../sound/click.mp3';\n\nlet clickSound = new Audio(clickFile);\n\nlet gameController = new GameController();\n\nlet dispatch;\n\n\n\nlet animateAndNext = async (fail) => {\n    clickSound.play();\n    if (fail === true) {\n        dispatch(optionsOut());\n        setTimeout(function () {\n            gameController.newGame()\n            dispatch(tweetIn());\n        }, 200);\n    }\n    else {\n        dispatch(tweetOut());\n        dispatch(optionsOut());\n        setTimeout(function () {\n            gameController.newGame()\n        }, 200);\n    }\n\n}\n\nconst TweetNav = () => {\n\n    dispatch = useDispatch();\n\n    let curGame = useSelector(state => state.game.curGame);\n\n    let message = 'Tweet completed.';\n\n    let fail = false;\n\n    if (curGame !== null) {\n        if (curGame.type === 'Complete') {\n            if (curGame.status === 'Fail') {\n                fail = true;\n                message = 'Fail. Keep moving.'\n            }\n\n        }\n    }\n\n    return (\n        <div className=\"tweet-nav-wrapper\">\n            <h2>{message}</h2>\n            <button onClick={() => animateAndNext(fail)}>NEXT &#x27AA;</button>\n        </div>\n    )\n}\n\nexport default TweetNav","import React, { Fragment } from \"react\";\nimport TwitterLogin from \"react-twitter-auth\";\nimport {\n  updateAuthentication,\n  updateToken,\n  updateUser,\n  logoutAndReset\n} from \"./../actions\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport TweetCard from \"./TweetCard/TweetCard\";\nimport TweetNav from \"./TweetNav\";\nimport DragOptions from \"./DragOptions\";\nimport Lives from './Lives';\n\nimport GameController from '../classes/GameController';\n\nimport { CSSTransition } from 'react-transition-group';\n\nimport clickFile from './../sound/click.mp3';\nimport printFile from './../sound/print.mp3';\nimport successFile from './../sound/success.mp3';\n\nlet clickSound = new Audio(clickFile);\nlet printSound = new Audio(printFile);\nlet successSound = new Audio(successFile);\n\nlet dispatch;\n\nlet gameController = new GameController();\n\nconst onFailedAuth = error => {\n  console.log(\"Twitter auth failed :(\");\n  console.log(error);\n};\n\nconst onSuccessAuth = async (response) => {\n  const token = response.headers.get(\"x-auth-token\");\n  console.log(response);\n  response.json().then(async user => {\n    //successful auth, update store\n    if (token) {\n      console.log(\"User auth successful :)\");\n      successSound.play();\n\n      //dispatch the user object to store\n      dispatch(updateUser(user));\n      //dispatch the token to store\n      dispatch(updateToken(token));\n      //dispatch action to update authentication to store\n      dispatch(updateAuthentication(true));\n\n    }\n  });\n};\n\nconst logout = () => {\n  clickSound.play();\n  //clear cache\n  localStorage.removeItem('state');\n  //set state to initial\n  dispatch(logoutAndReset());\n}\n\n\nconst App = () => {\n  //get current state\n  const user = useSelector(state => state.user);\n  const game = useSelector(state => state.game);\n\n  let animateOptions = useSelector(state => state.ui.optionsIn);\n\n  let gameAdmin;\n  let gridStyle = 'main-grid';\n  let gridSpan = '';\n\n  let animation = 'fade';\n  let animationDur = 400;\n\n  if (animateOptions === false) {\n    animationDur = 200;\n  }\n\n  let welcome = false;\n\n\n  if (user.isAuthenticated === true) {\n    if (game.curGame !== null) {\n      //we have a game\n      const sixHours = 6 * 60 * 60 * 1000;\n      if (Date.now() - game.lastTweetFetchDate > sixHours) {\n        console.log(\"last fetched more than six hours ago, re-fetching and creating new game now now\")\n        gameController.init();\n\n        game.curGame = null;\n      }\n\n      //show some administration like next button or refresh\n      else if (game.curGame.type === 'Complete') {\n        animation = 'scale';\n        animationDur = 200;\n        gameAdmin = (<TweetNav />);\n        gridStyle = 'single';\n        gridSpan = 'span';\n      }\n      else if (game.curGame.type === 'NoTweets') {\n        //this should probably be a new component\n        animation = 'none';\n        gameAdmin = (\n          <div className='no-new-tweets'>\n            <h2>No new tweets to fetch.</h2>\n            <h3>Try again later.</h3>\n            <button\n              onClick={() => {\n                clickSound.play();\n                gameController.newGame();\n              }}\n              className=\"button\"\n            >\n              RETRY\n          </button>\n          </div>\n        );\n\n        gridStyle = 'single';\n        gridSpan = 'span';\n      }\n    }\n    else {\n      gameController.init();\n    }\n  }\n\n\n  //check to see if we need to refresh\n\n  //init reference to dispatch\n  dispatch = useDispatch();\n\n\n  let content = null;\n\n  console.log(\"using \" + animation + ' for options animation');\n\n  if (user.isAuthenticated && game.curGame !== null) {\n    content = (\n      <div className=\"page-wrapper\">\n        <div className=\"top-bar\">\n          <div className=\"title\">\n            <h1>EASY COME, EASY GO</h1>\n          </div>\n          <div className=\"user-info\">\n            <img src={user.userDetails.img} alt='your profile picture' className='user-pic'></img>\n            <h3 className='user-name'>{user.userDetails.name}</h3>\n            <button className=\"small-text log-out\" onClick={() => logout()}>LOG OUT</button>\n          </div>\n        </div>\n        <div className={\"main-flex \" + gridStyle}>\n          <TweetCard />\n          <CSSTransition\n            in={animateOptions}\n            classNames={animation}\n            timeout={animationDur}\n          >\n            <div className={\"main-grid-col-2 \" + gridSpan + \" \" + animation}>\n              {game.curGame.type === 'Complete' || game.curGame.type === 'NoTweets' ?\n                <Fragment>\n                  <div className=\"span\">{gameAdmin}</div>\n                </Fragment>\n                :\n                <Fragment>\n                  <DragOptions />\n                  <Lives />\n                </Fragment>\n              }\n            </div>\n          </CSSTransition>\n        </div>\n      </div>\n    );\n\n  }\n\n  //loading after authentication\n  else if (user.isAuthenticated) {\n    content = (\n      <div className=\"page-wrapper\">\n        <div className=\"top-bar\">\n          <div className=\"title\">\n            <h1>SLOW TWITTER</h1>\n          </div>\n          <div className=\"user-info\">\n            <img src={user.userDetails.img} alt='your profile picture' className='user-pic'></img>\n            <h3 className='user-name'>{user.userDetails.name}</h3>\n            <button className=\"small-text log-out\" onClick={() => logout()}>LOG OUT</button>\n          </div>\n        </div>\n        <div id=\"noTrespassingOuterBarG\">\n          <div id=\"noTrespassingFrontBarG\" class=\"noTrespassingAnimationG\">\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n            <div class=\"noTrespassingBarLineG\"></div>\n          </div>\n        </div>\n      </div>\n    );\n\n  }\n\n  //initial view not signed in\n  else {\n    content = (\n      <div className=\"page-wrapper\">\n        <CSSTransition\n            in={true}\n            classNames={'fade-slow'}\n            timeout={1000}\n            appear={true}\n          >\n        <div className=\"top-bar\">\n          <div className=\"title\">\n            <h1>SLOW TWITTER</h1>\n          </div>\n          <div className=\"user-info\">\n            <TwitterLogin\n              loginUrl=\"http://slow-twitter.appspot.com/api/v1/auth/twitter\"\n              onFailure={onFailedAuth}\n              onSuccess={onSuccessAuth}\n              requestTokenUrl=\"http://slow-twitter.appspot.com/api/v1/auth/twitter/reverse\"\n              className=\"twitter-login-button small-text\"\n              text=\"SIGN IN TO TWITTER\"\n              showIcon={false}\n            />\n          </div>\n        </div>\n        </CSSTransition>\n        <div className={\"main-flex rel\"}>\n          <CSSTransition\n            in={true}\n            classNames={'slide-up-slow'}\n            appear={true}\n            timeout={2000}\n            onEntering={() => printSound.play()}\n            onEntered={() => printSound.pause()}\n          >\n            <div className=\"welcome-message-wrapper\">\n              <div className=\"welcome-message\">\n                <h2 className='section-title'>Welcome to Slow Twitter.</h2>\n                <p>This site will transform your Twitter feed into a series of mini-games.</p>\n                <p>Login to your Twitter account get started.</p>\n              </div>\n            </div>\n          </CSSTransition>\n        </div>\n      </div>\n\n    );\n  }\n\n\n  return <Fragment>{content}</Fragment>;\n};\nexport default App;\n","import store from './../index';\nimport { toast, Zoom } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport GameController from './GameController';\n\nimport badFile from './../sound/bad.mp3'\nimport goodFile from './../sound/type.mp3';\nimport successFile from './../sound/success.mp3';\nimport failFile from './../sound/fail.mp3';\n\nlet badSound = new Audio(badFile);\nlet goodSound = new Audio(goodFile);\nlet successSound = new Audio(successFile);\nlet failSound = new Audio(failFile);\n\nexport default class GuessAuthor {\n    constructor(newTweet) {\n\n        console.log(\"constructing GuessAuthor\");\n        this.curTweet = newTweet;\n        this.type = 'GuessAuthor';\n\n        this.friendOptions = [];\n        this.lives = 3;\n\n        this.parent = new GameController();\n    }\n\n    getLives() {\n        return this.lives;\n    }\n\n    newGame() {\n        //invoke method from GameController\n        this.parent.newGame();\n    }\n\n    //return 5 random friends\n    async getRandomFriends(friendList, init) {\n        let state;\n        let friends = null;\n        if (store !== undefined) {\n            state = store.getState();\n            if (friendList !== undefined) {\n                friends = friendList;\n            }\n            else {\n                friends = state.game.parsedFriends;\n            }\n        }\n        else {\n            if (friendList !== undefined) {\n                friends = friendList;\n            }\n            else {\n                friends = await this.parent.fetchAllFriends();\n            }\n        }\n\n        console.log(friends);\n\n        let correctAuthor = this.curTweet.user;\n\n        correctAuthor.correct = true;\n\n        let friendOptions = [];\n\n        friendOptions.push(correctAuthor);\n\n        for (let i = 0; i < 5; i++) {\n            if (friends !== null) {\n                let randIdx = getRandomUniqueIndex(friends.length - 1);\n                let randFriend = friends[randIdx];\n                while (randFriend.handle === correctAuthor.handle) {\n                    randIdx = getRandomUniqueIndex(friends.length - 1);\n                    randFriend = friends[randIdx];\n                }\n                randFriend.correct = false;\n                friendOptions.push(randFriend);\n            }\n        }\n\n        this.friendOptions = friendOptions;\n\n        if (!init) {\n            this.parent.updateGame(this);\n        }\n    }\n\n\n    handleDrop(correct) {\n        //correct drop! do some things\n        if (correct) {\n            this.success();\n        }\n        //incorrect drop! do some other things\n        else if (!correct) {\n            this.incorrectDrop();\n        }\n    }\n\n    incorrectDrop() {\n        //subtract life\n        this.lives = this.lives - 1;\n        badSound.play();\n        if (this.lives === 0) {\n            this.fail();\n        }\n        else {\n            toast.error('Wrong! ' + this.lives + \" lives remaining.\", {\n                position: \"top-center\",\n                autoClose: 2000,\n                closeButton: false,\n                pauseOnHover: true,\n                draggable: false,\n                transition: Zoom,\n                hideProgressBar: true\n            });\n            this.parent.updateGame(this);\n        }\n    }\n\n    async success() {\n        //get the next tweet\n        toast.success('Tweet completed correctly!', {\n            position: \"top-center\",\n            autoClose: 2000,\n            closeButton: false,\n            pauseOnHover: true,\n            draggable: false,\n            transition: Zoom,\n            hideProgressBar: true\n        });\n        successSound.play();\n        await this.parent.animateOut();\n        this.status = 'Success'\n        this.type = 'Complete';\n        this.parent.updateGame(this);\n    }\n\n    async fail() {\n        //display some sort of failure message\n        //proceed to next tweet\n        toast.error('Game over, man. Game over.', {\n            position: \"top-center\",\n            autoClose: 2000,\n            closeButton: false,\n            pauseOnHover: true,\n            draggable: false,\n            transition: Zoom,\n            hideProgressBar: true\n        });\n        failSound.play();\n        await this.parent.animateOut();\n        this.status = 'Fail'\n        this.type = 'Complete';\n        this.parent.updateGame(this);\n    }\n\n    static fromJSON(serializedJson) {\n        let newInstance = new GuessAuthor(serializedJson.curTweet);\n        newInstance.parent = new GameController();\n        newInstance.type = 'GuessAuthor';\n        return newInstance;\n    }\n\n}\n\nlet usedIdx = [];\n\nvar getRandomUniqueIndex = max => {\n    let newIdx = Math.floor(Math.random() * Math.floor(max));\n    while (usedIdx.includes(newIdx) && usedIdx.length < max) {\n        newIdx = Math.floor(Math.random() * Math.floor(max));\n    }\n    usedIdx.push(newIdx);\n    return newIdx;\n};","import FillBlank from './FillBlank';\nimport GuessAuthor from './GuessAuthor';\nimport store from '../index';\nimport {\n  updateParsedTweets,\n  updateCurGame,\n  updateParsedFriends,\n  setDataAndInitGame,\n  tweetOut,\n  optionsOut\n} from \"../actions\";\n\nvar he = require('he');\n\n/*\nTODO:\nhandle rate-limiting or no new tweets - inside new game \nscrub URLS from quote tweets\n\nBUGS:\ndouble init on reload when tweets fetched more than six hours ago\n*/\n\nexport default class GameController {\n\n  //fetch data and create a new game\n  async init() {\n    console.log(\"init\")\n    let tweets = await this.fetchNewTweets();\n    let friends = await this.fetchAllFriends();\n    let newGame = await this.newGame(true, tweets, friends);\n    let lastTweetFetched = null;\n    if (tweets !== null && tweets.length > 0) {\n      lastTweetFetched = tweets[tweets.length - 1].tweetID;\n    }\n    if (newGame && tweets && friends) {\n      store.dispatch(setDataAndInitGame(newGame, friends, tweets, lastTweetFetched));\n    }\n    else {\n      if (tweets === null) {\n        newGame.type = 'NoTweets';\n      }\n      console.error('problem in GameController.init()');\n      store.dispatch(setDataAndInitGame(newGame, friends, tweets, lastTweetFetched));\n    }\n    return Promise.resolve();\n  }\n\n  pickGame() {\n\n  }\n\n  async newGame(shouldReturn, tweets, friends) {\n    console.log(\"creating new game\");\n    //determine FillBlank or GuessAuthor psuedo randomly and instantiate\n    let state = store.getState();\n    //get all the tweets\n    let allTweets;\n    if (tweets) {\n      console.log('using tweets parameter');\n      allTweets = tweets;\n    }\n    else {\n      console.log('using tweets from state')\n      allTweets = state.game.parsedTweets;\n    }\n\n    if (allTweets && allTweets.length > 0) {\n      //remove the first one and save it (will be used to create new game)\n      let firstTweet = allTweets.splice(0, 1);\n      //determine FillBlank or GuessAuthor\n      let randomNumber = pickRandomNumber();\n      let newGame;\n      if (randomNumber <= 2) {\n        //instantiate FillBlank game\n        newGame = new FillBlank(firstTweet[0])\n\n        if (newGame.type === 'NoWords') {\n          newGame = new GuessAuthor(firstTweet[0]);\n          if (friends) {\n            newGame.getRandomFriends(friends);\n          }\n          newGame.getRandomFriends();\n        }\n      }\n      else {\n        //instantiate GuessAuthor game and make sure we get some random friends\n        newGame = new GuessAuthor(firstTweet[0]);\n        if (friends) {\n          newGame.getRandomFriends(friends);\n        }\n        newGame.getRandomFriends();\n      }\n\n      if (shouldReturn === true) {\n        return newGame;\n      }\n\n      else {\n        //call methods to update the store accordingly\n        this.updateTweets(allTweets);\n        this.updateGame(newGame);\n      }\n\n\n    }\n    else {\n      console.log(\"out of tweets, fetching more\");\n      let newTweets = await this.fetchNewTweets();\n      console.log(newTweets);\n      if (newTweets === null || Object.keys(newTweets).length < 1) {\n        console.error('Out of tweets in GameController.newGame()');\n        if (state.game.curGame !== null) {\n          state.game.curGame.type = 'NoTweets';\n        }\n        else {\n          state.game.curGame = {};\n          state.game.curGame.type = 'NoTweets';\n        }\n        this.updateGame(state.game.curGame);\n      }\n      else {\n        console.log('Got ' + Object.keys(newTweets).length - 1 + ' new tweets.')\n        this.updateTweets(newTweets);\n        this.newGame();\n      }\n\n    }\n  }\n\n  //method to handle when we can't get the tweets (either bad params, rate-limited, or simply no new tweets to fetch)\n  failFetchTweets() {\n\n  }\n\n  newGuessAuthor(tweet) {\n    console.log(\"couldn't extract words, constructing GuessAuthor\");\n\n    let newGame = new GuessAuthor(tweet);\n    newGame.getRandomFriends(undefined, true);\n\n    return // also updates the store\n  }\n\n  updateTweets(tweets) {\n    let lastTweetFetched = null;\n    if (tweets.length > 0) {\n      lastTweetFetched = tweets[tweets.length - 1].tweetID;\n    }\n    store.dispatch(updateParsedTweets(tweets, lastTweetFetched));\n  }\n\n\n  //resolves after 1 second - need to adjust to accomodate different times\n  async animateOut() {\n    store.dispatch(tweetOut());\n    store.dispatch(optionsOut());\n\n    return new Promise(resolve => setTimeout(\n      () => {\n        resolve();\n      }, 200\n    ));\n  }\n\n  updateGame(newGame) {\n\n    store.dispatch(updateCurGame(newGame));\n\n  }\n\n  async fetchNewTweets(updateStore) {\n\n    let state = store.getState();\n    console.log(\"fetchNewTweets\");\n\n    //only fetch if we have authenticated\n    if (state.user.userDetails !== null) {\n      //get our tokens from store\n      let userToken = state.user.userDetails.twitterProvider.token;\n      let userTokenSecret = state.user.userDetails.twitterProvider.tokenSecret;\n      //get our last tweet id from store (null if first fetch)\n      let lastTweetFetched = state.game.lastTweetFetched;\n\n      if (userToken !== null && userTokenSecret !== null) {\n        return await fetch(\n          `http://slow-twitter.appspot.com/api/v1/timeline?aT=${userToken}&aTS=${userTokenSecret}${\n          lastTweetFetched ? `&since=${lastTweetFetched}` : ``\n          }`,\n          { headers: { \"Content-Type\": \"application/json; charset=utf-8\" } }\n        )\n          .then(res => res.json())\n          .then(response => {\n            //make sure response not null\n            if (response) {\n              console.log(response);\n              if (response.errors) {\n                console.error('errors fetching new tweets');\n                return null;\n              }\n              else {\n                let parsedTweets = parseRawTweets(response);\n                //push to store\n                if (updateStore) {\n                  this.updateTweets(parsedTweets)\n                }\n                else {\n                  return parsedTweets;\n                }\n              }\n\n            }\n            else {\n              return null;\n            }\n          })\n          .catch(res => {\n            console.log(res);\n            return null;\n          });\n      } else {\n        console.error(\"Cannot refreshFeed, bad args\");\n\n      }\n    }\n  }\n\n\n  async fetchAllFriends() {\n    let allUserData = [];\n\n    //get first page of 20 users (wait for async fetch funtion)\n    let response = await fetchFriends();\n    console.log(response);\n    let cursor;\n\n    //get susequent pages of users\n    while (response && !response.errors && response.next_cursor !== -1) {\n      for (let user of response.users) {\n        allUserData.push(user);\n      }\n      cursor = response.next_cursor_str;\n      response = await fetchFriends(cursor);\n      console.log(response);\n    }\n\n    //make sure we got some data\n    if (allUserData.length > 0) {\n      //send to parser function\n      let parsedFriends = parseRawFriends(allUserData);\n      //update store\n      return Promise.resolve(parsedFriends);\n    }\n    else {\n      console.error(\"allUserData empty after getAllFriends()\");\n      return Promise.resolve(null);\n    }\n  }\n\n}\n\nvar pickRandomNumber = () => {\n  return Math.floor(Math.random() * Math.floor(4));\n\n}\n\nconst fetchFriends = async (cursor) => {\n\n  let state = store.getState();\n\n  let userToken = state.user.userDetails.twitterProvider.token;\n  let userTokenSecret = state.user.userDetails.twitterProvider.tokenSecret;\n\n  if (userToken !== null && userTokenSecret !== null) {\n    return await fetch(\n      `http://slow-twitter.appspot.com/api/v1/friends/list?aT=${userToken}&aTS=${userTokenSecret}${cursor ? `&cursor=${cursor}` : ``}`,\n      { headers: { \"Content-Type\": \"application/json; charset=utf-8\" } }\n    )\n      .then(res => res.json())\n      .then(response => {\n        //make sure it's not null\n        if (response.errors) {\n          console.error('could not fetch response');\n          console.error(response.errors);\n          return null;\n        }\n        else return response;\n      })\n      .catch(err => {\n        console.error(err);\n        return null\n      });\n  }\n  else {\n    console.error(\"user not auth in fetchFriends()\");\n    return Promise.resolve();\n  }\n\n}\n\nvar parseRawFriends = (rawFriends) => {\n  let parsedFriends = [];\n  //make sure we got em\n  if (rawFriends) {\n    for (let user of rawFriends) {\n      parsedFriends.push({\n        name: user.name,\n        pic: user.profile_image_url,\n        handle: user.screen_name\n      });\n    }\n\n    //push to store\n    return parsedFriends;\n\n  }\n\n  else {\n    console.error(\"rawFriends empty in parseRawFriends()\")\n  }\n}\n\n//take raw response from tweets and construct well-formed object with only needed info\nconst parseRawTweets = rawTweets => {\n  let newTweets = [];\n  //first tweet will have id of 0\n  for (let tweet of rawTweets) {\n    //throw out if the tweet is a retweet\n    if (tweet.retweeted_status) {\n      console.log(\"Tweet not parsed; is a retweet\");\n    } else if (tweet.in_reply_to_status_id !== null) {\n      console.log(\"Tweet not parsed; is a reply\");\n    } else {\n      //construct the object\n      let newTweet = {};\n      newTweet.date = tweet.created_at;\n      newTweet.tweetID = tweet.id_str;\n      newTweet.text = he.decode(tweet.full_text); //make sure that the text is unescaped\n      newTweet.urls = null;\n      if (tweet.entities.urls.length > 0) {\n        newTweet.urls = tweet.entities.urls;\n      }\n      if (newTweet.urls !== null) {\n        for (let url of newTweet.urls) {\n          newTweet.text = newTweet.text.replace(url.url, \"\");\n        }\n      }\n\n      newTweet.user = {};\n      newTweet.user.name = tweet.user.name;\n      newTweet.user.pic = tweet.user.profile_image_url;\n      newTweet.user.handle = tweet.user.screen_name;\n\n      //check for media of any type\n      if (tweet.extended_entities) {\n        newTweet.media = [];\n        newTweet.hasMedia = true;\n        for (let i = 0; i < tweet.extended_entities.media.length; i++) {\n          newTweet.media[i] = {};\n          newTweet.media[i].type = tweet.extended_entities.media[i].type;\n          //remove the in-text media link from the tweet text\n          newTweet.text = newTweet.text.replace(\n            tweet.extended_entities.media[i].url,\n            \"\"\n          );\n          if (newTweet.media[i].type === \"photo\") {\n            newTweet.media[i].url =\n              tweet.extended_entities.media[i].media_url_https;\n          } else if (newTweet.media[i].type === \"video\") {\n            newTweet.media[i].url =\n              tweet.extended_entities.media[i].video_info.variants[0].url;\n            newTweet.media[i].format =\n              tweet.extended_entities.media[i].video_info.variants[0].content_type;\n          } else if (newTweet.media[i].type === \"animated_gif\") {\n            //render as a video\n            newTweet.media[i].type = \"video\";\n            newTweet.media[i].url =\n              tweet.extended_entities.media[i].video_info.variants[0].url;\n            newTweet.media[i].format =\n              tweet.extended_entities.media[i].video_info.variants[0].content_type;\n          }\n          //NEED TO CHECK FOR OTHER TYPES OF MEDIA\n        }\n      } else {\n        newTweet.hasMedia = false;\n      }\n\n      //check for quote tweet\n      if (tweet.is_quote_status === true) {\n        newTweet.isQuote = true;\n\n        newTweet.quoteTweet = {};\n        newTweet.quoteTweet.text = he.decode(tweet.quoted_status.full_text); //make sure string is unescaped\n        newTweet.quoteTweet.date = tweet.quoted_status.created_at;\n        newTweet.quoteTweet.tweetID = tweet.quoted_status.id_str;\n        newTweet.quoteTweet.urls = null;\n        if (tweet.quoted_status.entities.urls.length > 0) {\n          newTweet.quoteTweet.urls = tweet.quoted_status.entities.urls;\n        }\n        if (newTweet.quoteTweet.urls !== null) {\n          for (let url of newTweet.quoteTweet.urls) {\n            newTweet.quoteTweet.text = newTweet.quoteTweet.text.replace(\n              url.url,\n              \"\"\n            );\n          }\n        }\n\n        newTweet.quoteTweet.user = {};\n        newTweet.quoteTweet.user.name = tweet.quoted_status.user.name;\n        newTweet.quoteTweet.user.pic =\n          tweet.quoted_status.user.profile_image_url;\n        newTweet.quoteTweet.user.handle = tweet.quoted_status.user.screen_name;\n\n        //check for quote tweet media\n        //check for media of any type\n        if (tweet.quoted_status.extended_entities) {\n          newTweet.quoteTweet.media = [{}];\n          newTweet.quoteTweet.hasMedia = true;\n          for (\n            let i = 0;\n            i < tweet.quoted_status.extended_entities.media.length;\n            i++\n          ) {\n            //remove the in-text media link from the tweet text\n            newTweet.quoteTweet.text = newTweet.quoteTweet.text.replace(\n              tweet.quoted_status.extended_entities.media[i].url,\n              \"\"\n            );\n            newTweet.quoteTweet.media[i] = {};\n            if (newTweet.quoteTweet.media[i].type === \"photo\") {\n              newTweet.quoteTweet.media[i].url =\n                tweet.quoted_status.extended_entities.media[i].media_url_https;\n            } else if (newTweet.quoteTweet.media[i].type === \"video\") {\n              newTweet.quoteTweet.media[i].url =\n                tweet.quoted_status.extended_entities.media[\n                  i\n                ].video_info.variants[0].url;\n            }\n          }\n        } else {\n          newTweet.quoteTweet.hasMedia = false;\n        }\n      } else {\n        newTweet.isQuote = false;\n      }\n\n      //put at the beginning of newTweets[] for oldest tweets first only if we have text to work with\n      if (newTweet.text.length > 0 && newTweet.isQuote === false) {\n        newTweets.unshift(newTweet);\n      } else if (newTweet.isQuote === true) {\n        if (newTweet.text.length > 0 && newTweet.quoteTweet.text.length > 0) {\n          newTweets.unshift(newTweet);\n        }\n      } else {\n        console.log(\n          \"TWEET PROCESSED BUT HAD NO TEXT AT THE END OF parseRawTweets()\"\n        );\n      }\n    }\n  }\n  console.log(newTweets);\n\n  return newTweets;\n\n};","import React, { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDrag } from \"react-dnd\";\n\nconst DragWord = props => {\n  let fibGame = useSelector(state => state.game.curGame);\n\n\n  const word = props.word;\n  const order = props.order;\n  let strike = false;\n  let opacity = 1;\n\n  let content = null;\n\n\n\n  const [{ isDragging }, drag] = useDrag({\n    item: { value: word, order: order, type: \"word\" },\n    //called after word is dropped\n    end: (item, monitor) => {\n      const dropResult = monitor.getDropResult();\n      //check if the item and dropResult exist\n      if (item && dropResult) {\n        strike = true;\n        //call function to check order and word correctness\n        fibGame.handleDrop(item.value, dropResult.order, item.order);\n      }\n    },\n    options: {\n      dropEffect: 'copy'\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  opacity = isDragging ? 0.4 : 1;\n\n\n  if (fibGame !== null) {\n    //check if word is one of the already dropped ones, and if so then strike it out\n    for (let wordObj of fibGame.droppedWords) {\n      if (wordObj.word === word) {\n        strike = true;\n        opacity = 0.5;\n      }\n    }\n  }\n\n  //switch strike based on whether word has been dropped\n  const textDecoration = strike ? 'line-through' : 'none';\n\n\n\n  if (word !== null) {\n    content = (\n      <div className=\"word-wrapper\">\n        <div ref={drag} style={{ opacity, textDecoration }} className=\"word-drag\">\n          {word}\n        </div>\n      </div>\n    );\n  }\n\n  return <Fragment>{content}</Fragment>;\n};\n\nexport default DragWord;\n","import React, { Fragment } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useDrag } from \"react-dnd\";\nimport TweetProfilePic from './TweetCard/TweetProfilePic'\n\nconst DragAuthor = props => {\n    let authorGame = useSelector(state => state.game.curGame);\n\n    const name = props.name;\n    const url = props.url;\n    const handle = props.handle;\n    const time = props.time;\n    const correct = props.correct;\n\n    let content = null;\n\n    const [{ isDragging, isOver, dragCoords }, drag] = useDrag({\n        item: { author: { name: name, url: url, handle: handle, time: time }, correct: correct, type: \"author\" },\n        //called after word is dropped\n        end: (item, monitor) => {\n            const dropResult = monitor.getDropResult();\n            //check if the item and dropResult exist\n            if (item && dropResult) {\n                //call function to check order and word correctness\n                authorGame.handleDrop(item.correct);\n            }\n        },\n        options: {\n            dropEffect: 'copy'\n        },\n        collect: monitor => ({\n            isDragging: monitor.isDragging(),\n            isOver: monitor.isOverTarget(),\n            dragCoords: monitor.getSourceClientOffset()\n        })\n    });\n\n    const opacity = isDragging ? 0.4 : 1;\n\n    content = (\n        <div className=\"author-drag\" style={{opacity}}>\n            <h3 className={\"tweet-info-name\"} ref={drag}>{name} <span className={\"tweet-info-details\"}> @{handle}</span></h3>\n        </div>\n    );\n\n    return <Fragment>{content}</Fragment>\n\n}\n\nexport default DragAuthor;","import React, { Fragment } from 'react'\nimport { useSelector } from \"react-redux\";\n\nimport Typing from 'react-typing-animation';\n\nexport var timeSinceTweet = function( tweetDateString ) {\n  \n    // Convert both dates to milliseconds\n    var tweetDate = new Date(tweetDateString);\n    var tweetTime = tweetDate.getTime();\n    var nowDate = new Date();\n    var nowTime = nowDate.getTime();\n  \n    // Calculate the difference in milliseconds\n    var difference_ms = nowTime - tweetTime;\n    //take out milliseconds\n    difference_ms = difference_ms/1000;\n    var seconds = Math.floor(difference_ms % 60);\n    difference_ms = difference_ms/60; \n    var minutes = Math.floor(difference_ms % 60);\n    difference_ms = difference_ms/60; \n    var hours = Math.floor(difference_ms % 24);  \n    var days = Math.floor(difference_ms/24);\n\n    if(days > 0) {\n        return days + \"d\"\n    }\n    else if(hours > 0) {\n        return hours + \"h\"\n    }\n    else if(minutes > 0) {\n        return minutes + \"m\"\n    }\n    else if(seconds > 0) {\n        return seconds + \"s\"\n    }\n    else {\n        return \"0s\"\n    }\n  }\n\n\nconst TweetInfo = (props) => {\n    const curGame = useSelector(state => state.game.curGame);\n    let curTweet = null;\n    if(curGame !== null) {\n        curTweet = curGame.curTweet;\n    }\n    let quote = props.quote;\n    let tweetToRender;\n    let classForTweetInfo;\n    //check if we need to render quote tweet info or no\n    if(quote === true) {\n        tweetToRender = curTweet.quoteTweet;\n        classForTweetInfo = \"quote-tweet-info\";\n    }\n    else {\n        tweetToRender = curTweet;\n        classForTweetInfo = \"tweet-info\"\n    }\n    let infoContent;\n    if (tweetToRender !== null) {\n        timeSinceTweet(tweetToRender.date);\n     infoContent = (\n            <div className={classForTweetInfo}>\n                <h3 className={classForTweetInfo + \"-name\"}>{tweetToRender.user.name}</h3>\n                <h4 className={classForTweetInfo + \"-details\"}>@{tweetToRender.user.handle} / {timeSinceTweet(tweetToRender.date)}</h4>\n            </div>\n        )\n    }\n    else {\n     infoContent = (<p>curTweet not found</p>);\n    }\n    return (\n        <Fragment>\n             {infoContent}\n        </Fragment>\n    )\n}\n\nexport default TweetInfo","import React from 'react'\nimport { useSelector } from \"react-redux\";\nimport DragWord from './DragWord';\nimport DragAuthor from './DragAuthor';\nimport {timeSinceTweet} from './TweetCard/TweetInfo';\n\nvar shuffle = (array) => {\n    var currentIndex = array.length, temporaryValue, randomIndex;\n\n    // While there remain elements to shuffle...\n    while (0 !== currentIndex) {\n\n        // Pick a remaining element...\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n\n        // And swap it with the current element.\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n}\n\nconst DragOptions = () => {\n    let game = useSelector(state => state.game.curGame);\n\n    \n\n    let className = 'drag-options-container double';\n\n    let content = null;\n    if (game !== null) {\n        let tweetTime = timeSinceTweet(game.curTweet.date);\n        if (game.type === 'FillBlank') {\n            if (game.wordOptions.length > 0) {\n                game.wordOptions = shuffle(game.wordOptions);\n                //console.log(game.wordOptions);\n                content =\n                    game.wordOptions.map((word, key) =>\n                        <DragWord word={word.word} order={word.order} key={key} />\n                    );\n            }\n        }\n\n        else if (game.type === \"GuessAuthor\") {\n            if (game.friendOptions.length > 0) {\n                className = 'drag-options-container'\n                game.friendOptions = shuffle(game.friendOptions);\n                content = game.friendOptions.map((user, key) => \n                    <DragAuthor key={key} name={user.name} url={user.pic} handle={user.handle} time={tweetTime} correct={user.correct} />\n                );\n                \n            }\n        }\n        else {\n            console.error(\"Game type not recognized in DragOptions\")\n        }\n    }\n\n    return (\n        <div className={className}>\n            {content}\n        </div>\n    )\n}\nexport default DragOptions","import React, { Fragment } from \"react\";\nimport {useSelector} from 'react-redux';\n\n\nconst Lives = () => {\n    const curGame = useSelector(state => state.game.curGame);\n\n    let content = [];\n\n\n    if(curGame !== null) {\n        content.push(<h2 className=\"lives\" key={100}>Strikes:</h2>);\n        \n        let strikes = 3 - curGame.lives;\n        let numIcons = 0;\n        for(let i = 0; i < strikes; i++) {\n            content.push(<h2 className='strike' key={numIcons}>&#x2715;</h2>);\n            numIcons++;\n        }\n\n        for(let i = numIcons; i < 3; i++) {\n            content.push(<h2 className='strike-left' key={i}>&#x2715;</h2>);\n        }\n    }\n    else {\n        content = null;\n    }\n\n    return <div className=\"lives-wrapper\">{content}</div>;\n}\nexport default Lives","const intialUser = {\n    isAuthenticated: false,\n    userDetails: null,\n    userToken: null\n}\n\nconst user = (state = intialUser, action) => {\n    switch(action.type) {\n        case 'RESET':\n            return intialUser\n        case 'SET_AUTHENTICATION':\n            return {\n                ...state,\n                isAuthenticated: action.isAuthenticated\n            }\n        case 'SET_USER':\n            return {\n                ...state,\n                userDetails: action.user\n\n            }\n        case 'SET_TOKEN':\n            return {\n                ...state,\n                userToken: action.token\n            }\n        default:\n            return state\n    }\n}\n\nexport default user","const intialGame = {\n  lastTweetFetched: null,\n  parsedTweets: null,\n  curGame: null,\n  parsedFriends: null,\n  lastTweetFetchDate: null\n};\n\nconst game = (state = intialGame, action) => {\n  switch (action.type) {\n    case 'RESET':\n      return intialGame;\n    case \"INIT_GAME\":\n      return {\n        ...state,\n        curGame: action.curGame,\n        parsedFriends: action.parsedFriends,\n        parsedTweets: action.parsedTweets,\n        lastTweetFetchDate: action.lastTweetFetchDate,\n        lastTweetFetched: action.lastTweetFetched\n      }\n    case \"SET_CURRENT_GAME\":\n      return {\n        ...state,\n        curGame: action.curGame\n      };\n    case \"SET_LAST_TWEET_FETCHED\":\n      return {\n        ...state,\n        lastTweetFetched: action.lastFetched\n      };\n    case \"SET_PARSED_TWEETS\":\n      if (action.lastTweetFetched === null) {\n        return {\n          ...state,\n          parsedTweets: action.parsedTweets,\n          lastTweetFetchDate: action.lastTweetFetchDate\n        };\n      }\n      else {\n        return {\n          ...state,\n          parsedTweets: action.parsedTweets,\n          lastTweetFetchDate: action.lastTweetFetchDate,\n          lastTweetFetched: action.lastTweetFetched\n        };\n      }\n    case \"SET_PARSED_FRIENDS\":\n      return {\n        ...state,\n        parsedFriends: action.parsedFriends\n      };\n    default:\n      return state;\n  }\n};\n\nexport default game;","const intialLightbox = {\n    isVisible: false,\n    slide: 0\n  };\n  \n  const lightbox = (state = intialLightbox, action) => {\n    switch (action.type) {\n      case 'RESET':\n        return intialLightbox;\n      case \"TOGGLE_LB_VISIBLE\":\n        return {\n          ...state,\n          isVisible: !state.isVisible \n        };\n        case \"SET_LB_SLIDE\":\n        return {\n          ...state,\n          slide: action.slideNum\n        };\n     \n      default:\n        return state;\n    }\n  };\n  \n  export default lightbox;\n  ","const initialUI = {\n    tweetIn: true,\n    optionsIn: false,\n    completeIn: true\n}\n\nconst ui = (state = initialUI, action) => {\n    switch (action.type) {\n        case 'RESET':\n            return initialUI;\n        case 'TWEET_IN_TRUE':\n            return {\n                ...state,\n                tweetIn: true\n            }\n        case 'TWEET_IN_FALSE':\n            return {\n                ...state,\n                tweetIn: false\n            }\n        case 'OPTIONS_IN_TRUE':\n            return {\n                ...state,\n                optionsIn: true\n\n            }\n        case 'OPTIONS_IN_FALSE':\n            return {\n                ...state,\n                optionsIn: false\n\n            }\n        case 'TOGGLE_COMPLETE_IN':\n            return {\n                ...state,\n                userToken: !state.completeIn\n            }\n        default:\n            return state\n    }\n}\n\nexport default ui","import React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport rootReducer from \"./reducers\";\nimport { DndProvider } from \"react-dnd\";\nimport HTML5Backend from \"react-dnd-html5-backend\";\nimport { toast } from 'react-toastify';\n\nimport { loadState, saveState } from \"./local-storage/localStorage\";\nimport throttle from \"lodash.throttle\";\n\nimport GameController from './classes/GameController';\n\nlet gameController = new GameController();\n\nlet persistedState = loadState();\nconsole.log(persistedState);\nlet store;\n\ntoast.configure();\n\n//use persisted state if avail\nif (persistedState !== undefined) {\n\n  store = createStore(\n    rootReducer,\n    persistedState,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n      trace: true\n    })\n  );\n\n} \n//no state in local storage\nelse {\n  store = createStore(\n    rootReducer,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__({\n      trace: true\n    })\n  );\n}\n\nexport default store;\n\n//save state a maximum of once every second\nstore.subscribe(\n  throttle(() => {\n    saveState({\n      game: store.getState().game,\n      user: store.getState().user\n    });\n  }, 1000)\n);\n\nrender(\n  <Provider store={store}>\n    <DndProvider backend={HTML5Backend}>\n      <App />\n    </DndProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);","import { combineReducers } from 'redux'\nimport user from './user'\nimport game from './game'\nimport lightbox from './lightbox'\nimport ui from './ui'\n\nexport default combineReducers({\n  user,\n  game,\n  lightbox,\n  ui\n})","import FillBlank from './../classes/FillBlank';\nimport GuessAuthor from '../classes/GuessAuthor';\n\nexport const loadState = () => {\n  console.log(\"ATTEMPTING TO LOAD STATE\");\n  try {\n    const serializedState = localStorage.getItem('state');\n    if (serializedState === null) {\n      return undefined;\n    }\n    let parsedState = JSON.parse(serializedState);\n    console.log(parsedState);\n    //need to reconstruct the class instance based on persisted properties if it exists\n    if (parsedState.game.curGame !== null) {\n      let gameFromJson = {};\n      if (parsedState.game.curGame.type === 'FillBlank') {\n        gameFromJson = FillBlank.fromJSON(parsedState.game.curGame);\n        console.log(gameFromJson);\n        if(gameFromJson.type === 'NoWords') {\n          gameFromJson = GuessAuthor.fromJSON(parsedState.game.curGame);\n          gameFromJson.getRandomFriends(parsedState.game.parsedFriends, true);\n        }\n      }\n      else if(parsedState.game.curGame.type === 'NoWords') {\n        console.log('game type is NoWords, constructing GuessAuthor');\n        gameFromJson = GuessAuthor.fromJSON(parsedState.game.curGame);\n        gameFromJson.getRandomFriends(parsedState.game.parsedFriends, true);\n      }\n      else if (parsedState.game.curGame.type === 'GuessAuthor') {\n        console.log('constructing new GuessAuthor game');\n        gameFromJson = GuessAuthor.fromJSON(parsedState.game.curGame);\n        gameFromJson.getRandomFriends(parsedState.game.parsedFriends, true);\n      }\n      else if(parsedState.game.curGame.type === 'Complete') {\n        gameFromJson.type = 'Complete';\n        gameFromJson.curTweet = parsedState.game.curGame.curTweet;\n      }\n      else if(parsedState.game.curGame.type === 'NoTweets') {\n        gameFromJson.type = 'NoTweets';\n        gameFromJson.curTweet = parsedState.game.curGame.curTweet;\n      }\n      else {\n        console.error(\"Game type not caught in localStorage.js\");\n      }\n\n      parsedState.game.curGame = gameFromJson;\n    }\n    return parsedState;\n  } catch (err) {\n    console.error(err);\n    return undefined;\n  }\n};\n\nexport const saveState = (state) => {\n  console.log(\"ATTEMPTING TO SAVE STATE\");\n  try {\n    const serializedState = JSON.stringify(state);\n    localStorage.setItem('state', serializedState);\n  } catch {\n    // ignore write errors\n  }\n};","module.exports = __webpack_public_path__ + \"static/media/success.6ba16415.mp3\";","module.exports = __webpack_public_path__ + \"static/media/print.1d3d03ec.mp3\";","module.exports = __webpack_public_path__ + \"static/media/bad.ef6e1241.mp3\";","module.exports = __webpack_public_path__ + \"static/media/type.92cc9868.mp3\";","module.exports = __webpack_public_path__ + \"static/media/fail.b3426cab.mp3\";","module.exports = __webpack_public_path__ + \"static/media/click.06b376b9.mp3\";"],"sourceRoot":""}